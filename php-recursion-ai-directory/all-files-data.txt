//----- File: 001.php -----

<?php
require_once("utils/directory-scanner.php");
require_once("utils/file-content-writer.php");

$dirPath = "target-directory";
$allFiles = [];
$isCheckBox = true;
$writeSuccess = false;
$selectedFiles = [];
$scannedFiles = [];

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $formName = $_POST['post_form_name'] ?? '';

    if ($formName === "scan_directory") {
        $isCheckBox = isset($_POST['show_checkboxes']);
        $allFiles = DirectoryScanner::scanDirectoryFiles($dirPath);
        $selectedFiles = $allFiles;
    }

    if ($formName === "content_writing") {
        $selectedFiles = $_POST['selected_files'] ?? [];
        $scannedFiles = $_POST['scanned_files'] ?? [];
        $isCheckBox = $_POST['show_checkboxes'];
        $allFiles = $scannedFiles;
        $contentFiles = $scannedFiles;
        if($isCheckBox) {
            $contentFiles = $selectedFiles;
        }

        if (!empty($contentFiles)) {
            $writeSuccess = FileContentWriter::saveToFile("all-files-data.txt", $contentFiles, $dirPath);
        }
    }
}
?>
<!DOCTYPE html>
<html>
<head>
    <title>Directory Scanner</title>
    <link rel="stylesheet" href="assets/style/style.css">
</head>
<body>
<h2>Directory Scanner</h2>

<!-- Scan Form -->
<form method="post">
    <label>
        <input type="checkbox" name="show_checkboxes" <?= $isCheckBox ? 'checked' : '' ?>>
        Show checkboxes
    </label>
    <input type="hidden" name="post_form_name" value="scan_directory">
    <button type="submit" name="btn_scan_directory">Scan Directory</button>
</form>

<?php if (!empty($allFiles)): ?>
    <h3>Directory Structure</h3>

    <?php if ($isCheckBox || (!$isCheckBox && !empty($allFiles))): ?>
        <form method="post">
            <?= DirectoryScanner::makeDirectoryStructure($allFiles, $isCheckBox, $selectedFiles); ?>
            <br>
            <input type="hidden" name="show_checkboxes" value="<?= $isCheckBox ? '1' : '' ?>">
            <input type="hidden" name="post_form_name" value="content_writing">
            <?php foreach ($allFiles as $file): ?>
                <input type="hidden" name="scanned_files[]" value="<?= htmlspecialchars($file); ?>">
            <?php endforeach; ?>
            <button type="submit" name="btn_content_writing">Write Content to File</button>
        </form>
    <?php endif; ?>
<?php endif; ?>

<?php if ($writeSuccess): ?>
    <p style="color: green;"><strong>File content successfully written to <code>all-files-data.txt</code>.</strong></p>
<?php elseif (isset($_POST['post_form_name']) && $_POST['post_form_name'] === "content_writing" && empty($selectedFiles)): ?>
    <p style="color: red;"><strong>No files selected or write failed.</strong></p>
<?php endif; ?>

<script src="assets/js/script.js"></script>
</body>
</html>

//----- File: assets/js/script.js -----

function toggleCheckboxes(className) {
    const checkboxes = document.querySelectorAll('input.' + className + "[type='checkbox']");
    if (checkboxes.length === 0) return;

    const allChecked = Array.from(checkboxes).every(cb => cb.checked);
    checkboxes.forEach(cb => cb.checked = !allChecked);
}

function toggleFolder(className) {
    const containers = document.querySelectorAll('.' + className);
    const icon = document.querySelector('[data-folder-icon="' + className + '"]');

    containers.forEach(el => el.classList.toggle('open'));

    if (icon) {
        const isOpen = containers[0].classList.contains('open');
        icon.textContent = isOpen ? '▼' : '▶';
    }

    // Toggle checkboxes under this folder
    toggleCheckboxes(className);
}

// Add event listener for directory name click
document.addEventListener('DOMContentLoaded', function() {
    const folderNames = document.querySelectorAll('.folder-name');
    folderNames.forEach(function(folderName) {
        folderName.addEventListener('click', function() {
            const className = folderName.getAttribute('data-folder');
            toggleFolder(className);
        });
    });
});

//----- File: assets/style/style.css -----

body {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Noto Sans", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji";
    line-height: 1.5;
    color: #333;
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
}

pre {
    background-color: #f6f8fa;
    padding: 16px;
    border-radius: 6px;
    overflow-x: auto;
}

.toggle-folder {
    cursor: pointer;
    display: inline-block;
    user-select: none;
    width: 1em;
    margin-right: 5px;
    color: #6a737d;
}

.folder-name {
    cursor: pointer;
    color: #0366d6;
    font-weight: 600;
}

.folder-content {
    display: none;
    margin-left: 20px;
}

.folder-content.open {
    display: block;
}

.directory-structure {
    font-family: SFMono-Regular, Consolas, "Liberation Mono", Menlo, monospace;
    font-size: 14px;
    line-height: 1.6;
    background-color: #f6f8fa;
    padding: 16px;
    border-radius: 6px;
    border: 1px solid #e1e4e8;
}

.directory-item {
    white-space: nowrap;
}

label {
    cursor: pointer;
}

input[type="checkbox"] {
    margin-right: 6px;
    vertical-align: middle;
}

button {
    background-color: #2ea44f;
    color: white;
    border: 1px solid rgba(27, 31, 35, 0.15);
    padding: 6px 12px;
    font-size: 14px;
    font-weight: 500;
    line-height: 20px;
    border-radius: 6px;
    cursor: pointer;
    margin: 8px 0;
}

button:hover {
    background-color: #2c974b;
}

h2 {
    color: #24292e;
    border-bottom: 1px solid #eaecef;
    padding-bottom: 9px;
}

h3 {
    color: #24292e;
    margin-top: 24px;
}

[style*="color: green"] {
    color: #22863a !important;
}

[style*="color: red"] {
    color: #cb2431 !important;
}

//----- File: utils/directory-scanner.php -----

<?php
class DirectoryScanner {
    public static function scanDirectoryFiles($dir, $is_real_path = false, $base_dir = null) {
        if (empty($dir)) {
            $dir = __DIR__;
        }

        if ($base_dir === null) {
            $base_dir = realpath($dir);
        }

        $files = [];

        if (!is_dir($dir)) {
            return $files;
        }

        $items = scandir($dir);

        foreach ($items as $item) {
            if ($item === "." || $item === "..") {
                continue;
            }

            $path = $dir . DIRECTORY_SEPARATOR . $item;

            if (is_file($path)) {
                $realPath = realpath($path);
                $relativePath = ltrim(str_replace($base_dir, '', $realPath), DIRECTORY_SEPARATOR);
                $files[] = $relativePath;
            } elseif (is_dir($path)) {
                $files = array_merge($files, self::scanDirectoryFiles($path, $is_real_path, $base_dir));
            }
        }

        return $files;
    }

    public static function makeDirectoryStructure(array $fileList, $isCheckBox = false, array $selectedFiles = []) {
        $tree = [];

        foreach ($fileList as $filePath) {
            $parts = explode(DIRECTORY_SEPARATOR, $filePath);
            $current = &$tree;

            foreach ($parts as $part) {
                if (!isset($current[$part])) {
                    $current[$part] = [];
                }
                $current = &$current[$part];
            }
        }

        return self::renderDirectoryTree($tree, '', $isCheckBox, '', $selectedFiles);
    }

    private static function renderDirectoryTree(array $tree, $prefix = '', $isCheckBox = false, $path = '', array $selectedFiles = []) {
        $output = '';
        $total = count($tree);
        $index = 0;

        foreach ($tree as $name => $subtree) {
            $index++;
            $connector = ($index === $total) ? '└── ' : '├── ';
            $fullPath = ltrim($path . DIRECTORY_SEPARATOR . $name, DIRECTORY_SEPARATOR);
            $sanitizedClass = 'dir_' . md5($fullPath);

            $output .= '<div class="directory-item">';
            $output .= '<span class="directory-connector">' . $prefix . $connector . '</span>';

            if (is_array($subtree) && !empty($subtree)) {
                if ($isCheckBox) {
                    $output .= "<span class='toggle-folder' data-folder-icon='$sanitizedClass' onclick=\"toggleFolder('$sanitizedClass')\">▼</span> ";
                    $output .= "<span class='folder-name' onclick=\"toggleFolder('$sanitizedClass'); toggleCheckboxes('$sanitizedClass')\"><strong>" . htmlspecialchars($name) . "</strong></span>";
                } else {
                    $output .= "<strong>" . htmlspecialchars($name) . "</strong>";
                }

                $nextPrefix = $prefix . ($index === $total ? '&nbsp;&nbsp;&nbsp;' : '│&nbsp;&nbsp;&nbsp;');
                $output .= "</div><div class='folder-content open $sanitizedClass' id='$sanitizedClass'>";
                $output .= self::renderDirectoryTree($subtree, $nextPrefix, $isCheckBox, $fullPath, $selectedFiles);
                $output .= "</div>";
            } else {
                if ($isCheckBox) {
                    $checked = in_array($fullPath, $selectedFiles) ? 'checked' : '';
                    $output .= "<label class='checkbox-label'><input type='checkbox' class='$sanitizedClass' name='selected_files[]' value='" . htmlspecialchars($fullPath) . "' $checked>" .
                        htmlspecialchars($name) . "</label>";
                    $output .= "<input type='hidden' name='scanned_files[]' value='" . htmlspecialchars($fullPath) . "'>";
                } else {
                    $output .= htmlspecialchars($name);
                }
                $output .= "</div>";
            }
        }

        return $output;
    }
}
?>

//----- File: utils/file-content-writer.php -----

<?php
class FileContentWriter {
    public static function aggregateFiles(array $allFiles, string $baseDir = ''): string {
        $fileContents = [];
        $baseDir = rtrim($baseDir, DIRECTORY_SEPARATOR);

        foreach ($allFiles as $filePath) {
            $fullPath = !empty($baseDir) ? $baseDir . DIRECTORY_SEPARATOR . $filePath : $filePath;

            if (file_exists($fullPath)) {
                $content = file_get_contents($fullPath);
                $fileContents[] = [
                    'file' => str_replace("\\", "/", $filePath),
                    'content' => $content
                ];
            } else {
                $fileContents[] = [
                    'file' => $filePath,
                    'content' => 'File not found.'
                ];
            }
        }

        $finalOutput = "";
        foreach ($fileContents as $fileData) {
            $finalOutput .= "//----- File: " . $fileData['file'] . " -----\n\n";
            $finalOutput .= $fileData['content'] . "\n\n";
        }

        return $finalOutput;
    }

    public static function saveToFile(string $outputFile, array $allFiles, string $baseDir = ''): bool {
        $data = self::aggregateFiles($allFiles, $baseDir);
        return file_put_contents($outputFile, $data) !== false;
    }
}
?>

- if unchecked checkbox strike through file name else normal file name toggle

- don't change full code structure or base structure
- provide full code