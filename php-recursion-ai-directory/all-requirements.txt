//----- File: 001.php -----

<?php
require_once("utils/directory-scanner.php");
require_once("utils/file-content-writer.php");

$dirPath = "target-directory";
$allFiles = [];
$isCheckBox = true;
$writeSuccess = false;

if ($_SERVER['REQUEST_METHOD'] === 'POST' && $_POST['post_form_name'] == "scan_directory") {
    $isCheckBox = isset($_POST['show_checkboxes']);
    $allFiles = DirectoryScanner::scanDirectoryFiles($dirPath);
}

if ($_SERVER['REQUEST_METHOD'] === 'POST' &&  $_POST['post_form_name'] == "content_writing") {
    $selectedFiles = $_POST['selected_files'] ?? [];
    $scannedFiles = $_POST['scanned_files'] ?? [];
    if (!empty($selectedFiles)) {
        $writeSuccess = FileContentWriter::saveToFile("all-files-data.txt", $selectedFiles, $dirPath);
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Directory Scanner</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Noto Sans", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji";
            line-height: 1.5;
        }
        pre {
            background-color: #f5f5f5;
            padding: 10px;
            border-radius: 5px;
        }
    </style>
</head>
<body>
<h2>Directory Scanner</h2>

<!-- Scan Form -->
<form method="post">
    <label>
        <input type="checkbox" name="show_checkboxes" <?= $isCheckBox ? 'checked' : '' ?>>
        Show checkboxes
    </label>
    <input type="hidden" name="post_form_name" value="scan_directory">
    <button type="submit" name="btn_scan_directory">Scan Directory</button>
</form>

<?php if (!empty($allFiles)): ?>
    <h3>Directory Structure</h3>
    <!-- File selection form -->
    <form method="post">
        <?= DirectoryScanner::makeDirectoryStructure($allFiles, $isCheckBox); ?>
        <br>
        <input type="hidden" name="show_checkboxes" value="<?= $isCheckBox; ?>">
        <input type="hidden" name="post_form_name" value="content_writing">
        <button type="submit" name="btn_content_writing">Write Content to File</button>
    </form>
<?php endif; ?>

<?php if ($writeSuccess): ?>
    <p style="color: green;"><strong>File content successfully written to <code>all-files-data.txt</code>.</strong></p>
<?php elseif (isset($_POST['content_writing'])): ?>
    <p style="color: red;"><strong>No files selected or write failed.</strong></p>
<?php endif; ?>
</body>
</html>

//----- File: utils/directory-scanner - v001.php -----

<?php
class DirectoryScanner {
    public static function scanDirectoryFiles($dir, $is_real_path = false, $base_dir = null) {
        if (empty($dir)) {
            $dir = __DIR__;
        }

        if ($base_dir === null) {
            $base_dir = realpath($dir);
        }

        $files = [];

        if (!is_dir($dir)) {
            return $files;
        }

        $items = scandir($dir);

        foreach ($items as $item) {
            if ($item === "." || $item === "..") {
                continue;
            }

            $path = $dir . DIRECTORY_SEPARATOR . $item;

            if (is_file($path)) {
                $realPath = realpath($path);
                if ($is_real_path) {
                    $files[] = $realPath;
                } else {
                    $relativePath = ltrim(str_replace($base_dir, '', $realPath), DIRECTORY_SEPARATOR);
                    $files[] = $relativePath;
                }
            } elseif (is_dir($path)) {
                $files = array_merge($files, self::scanDirectoryFiles($path, $is_real_path, $base_dir));
            }
        }

        return $files;
    }

    public static function makeDirectoryStructure(array $fileList) {
        $tree = [];

        foreach ($fileList as $filePath) {
            $parts = explode(DIRECTORY_SEPARATOR, $filePath);
            $current = &$tree;

            foreach ($parts as $part) {
                if (!isset($current[$part])) {
                    $current[$part] = [];
                }
                $current = &$current[$part];
            }
        }

        return self::renderDirectoryTree($tree);
    }

    private static function renderDirectoryTree(array $tree, $prefix = '') {
        $output = '';
        $total = count($tree);
        $index = 0;

        foreach ($tree as $name => $subtree) {
            $index++;
            $connector = ($index === $total) ? '└── ' : '├── ';
            $output .= $prefix . $connector . $name . "\n";

            if (is_array($subtree) && !empty($subtree)) {
                $nextPrefix = $prefix . ($index === $total ? '    ' : '│   ');
                $output .= self::renderDirectoryTree($subtree, $nextPrefix);
            }
        }

        return $output;
    }
}
?>

//----- File: utils/directory-scanner.php -----

<?php
class DirectoryScanner {
    public static function scanDirectoryFiles($dir, $is_real_path = false, $base_dir = null) {
        if (empty($dir)) {
            $dir = __DIR__;
        }

        if ($base_dir === null) {
            $base_dir = realpath($dir);
        }

        $files = [];

        if (!is_dir($dir)) {
            return $files;
        }

        $items = scandir($dir);

        foreach ($items as $item) {
            if ($item === "." || $item === "..") {
                continue;
            }

            $path = $dir . DIRECTORY_SEPARATOR . $item;

            if (is_file($path)) {
                $realPath = realpath($path);
                $relativePath = ltrim(str_replace($base_dir, '', $realPath), DIRECTORY_SEPARATOR);
                $files[] = $relativePath;
            } elseif (is_dir($path)) {
                $files = array_merge($files, self::scanDirectoryFiles($path, $is_real_path, $base_dir));
            }
        }

        return $files;
    }

    public static function makeDirectoryStructure(array $fileList, $isCheckBox = false) {
        $tree = [];

        foreach ($fileList as $filePath) {
            $parts = explode(DIRECTORY_SEPARATOR, $filePath);
            $current = &$tree;

            foreach ($parts as $part) {
                if (!isset($current[$part])) {
                    $current[$part] = [];
                }
                $current = &$current[$part];
            }
        }

        return self::renderDirectoryTree($tree, '', $isCheckBox);
    }

    private static function renderDirectoryTree(array $tree, $prefix = '', $isCheckBox = false, $path = '') {
        $output = '';
        $total = count($tree);
        $index = 0;

        foreach ($tree as $name => $subtree) {
            $index++;
            $connector = ($index === $total) ? '└── ' : '├── ';
            $fullPath = ltrim($path . DIRECTORY_SEPARATOR . $name, DIRECTORY_SEPARATOR);

            if (is_array($subtree) && !empty($subtree)) {
                $output .= $prefix . $connector . "<strong>" . htmlspecialchars($name) . "</strong><br>";
                $nextPrefix = $prefix . ($index === $total ? '&nbsp;&nbsp;&nbsp;&nbsp;' : '│&nbsp;&nbsp;&nbsp;');
                $output .= self::renderDirectoryTree($subtree, $nextPrefix, $isCheckBox, $fullPath);
            } else {
                if ($isCheckBox) {
                    $output .= $prefix . $connector .
                        "<label><input type='checkbox' name='selected_files[]' value='" . htmlspecialchars($fullPath) . "' checked> " .
                        htmlspecialchars($name) . "</label><br>\n";
                    $output .= "<input type='hidden' name='scanned_files[]' value='" . htmlspecialchars($fullPath) . "'>\n";
                } else {
                    $output .= $prefix . $connector . htmlspecialchars($name) . "<br>";
                }
            }
        }

        return $output;
    }
}
?>

//----- File: utils/file-content-writer.php -----

<?php
class FileContentWriter {
    public static function aggregateFiles(array $allFiles, string $baseDir = ''): string {
        $fileContents = [];
        $baseDir = rtrim($baseDir, DIRECTORY_SEPARATOR);

        foreach ($allFiles as $filePath) {
            $fullPath = !empty($baseDir) ? $baseDir . DIRECTORY_SEPARATOR . $filePath : $filePath;

            if (file_exists($fullPath)) {
                $content = file_get_contents($fullPath);
                $fileContents[] = [
                    'file' => str_replace("\\", "/", $filePath),
                    'content' => $content
                ];
            } else {
                $fileContents[] = [
                    'file' => $filePath,
                    'content' => 'File not found.'
                ];
            }
        }

        $finalOutput = "";
        foreach ($fileContents as $fileData) {
            $finalOutput .= "//----- File: " . $fileData['file'] . " -----\n\n";
            $finalOutput .= $fileData['content'] . "\n\n";
        }

        return $finalOutput;
    }

    public static function saveToFile(string $outputFile, array $allFiles, string $baseDir = ''): bool {
        $data = self::aggregateFiles($allFiles, $baseDir);
        return file_put_contents($outputFile, $data) !== false;
    }
}
?>

- no need expand collapsed functionality
- click on directory name toggle not working
- is it possible to click on directory name checked or unchecked toggle under that directory file name checkbox
- checked or unchecked checkbox toggle not working

- don't change full code structure or base structure
- provide full code

- if post_form_name is scan_directory scan the directory and return the directory and file list
- if post_form_name is content_writing selected files contents are writing in a file
- if show_checkboxes true or false and $allFiles empty content_writing form not show
- if show_checkboxes false and $allFiles not empty content_writing form show
- DirectoryScanner::makeDirectoryStructure($allFiles, $isCheckBox) $allFiles generate base on scanned_files and selected_files
- if scanned_files file is in selected_files array the checkbox is checked else unchecked

- don't change full code structure or base structure
- provide full code