//----- File: dashboard/api/DashboardApiService.kt -----

package com.rzrasel.wordquiz.feature.dashboard.api

import com.rzrasel.wordquiz.feature.dashboard.data.model.DashboardDto
import com.rzrasel.wordquiz.feature.dashboard.data.model.DashboardRequest
import retrofit2.Response
import retrofit2.http.Body
import retrofit2.http.GET
import retrofit2.http.POST

interface DashboardApiService {
    @GET("dashboard/")
    suspend fun getDashboard(
    ): Response<DashboardDto>

    @POST("dashboard/")
    suspend fun dashboard(
        @Body dashboardRequest: DashboardRequest
    ): Response<DashboardDto>
}

//----- File: dashboard/data/datasource/DashboardRemoteDataSource.kt -----

package com.rzrasel.wordquiz.feature.dashboard.data.datasource

import com.rzrasel.wordquiz.feature.dashboard.data.model.DashboardDto
import com.rzrasel.wordquiz.feature.dashboard.data.model.DashboardRequest
import com.rzrasel.wordquiz.networkstate.NetworkState

interface DashboardRemoteDataSource {
    suspend fun getDashboard(request: DashboardRequest): NetworkState<DashboardDto>
}

//----- File: dashboard/data/datasource/DashboardRemoteDataSourceImpl.kt -----

package com.rzrasel.wordquiz.feature.dashboard.data.datasource

import com.rzrasel.wordquiz.feature.dashboard.api.DashboardApiService
import com.rzrasel.wordquiz.feature.dashboard.data.model.DashboardDto
import com.rzrasel.wordquiz.feature.dashboard.data.model.DashboardRequest
import com.rzrasel.wordquiz.networkstate.NetworkState
import retrofit2.HttpException
import java.io.IOException

class DashboardRemoteDataSourceImpl(
    private val apiService: DashboardApiService
) : DashboardRemoteDataSource {
    override suspend fun getDashboard(request: DashboardRequest): NetworkState<DashboardDto> {
        return try {
            val response = apiService.getDashboard()
            if (response.isSuccessful) {
                response.body()?.let {
                    NetworkState.Success(it)
                } ?: NetworkState.Error("Empty response body")
            } else {
                NetworkState.Error("HTTP error: ${response.code()}")
            }
        } catch (e: HttpException) {
            NetworkState.Error("HTTP error: ${e.code()}")
        } catch (e: IOException) {
            NetworkState.Error("Network error: ${e.message}")
        } catch (e: Exception) {
            NetworkState.Error("Unknown error: ${e.message}")
        }
    }
}

//----- File: dashboard/data/mapper/DashboardModelMapper.kt -----

package com.rzrasel.wordquiz.feature.dashboard.data.mapper

import com.rzrasel.wordquiz.feature.dashboard.data.model.DashboardCategoryDto
import com.rzrasel.wordquiz.feature.dashboard.domain.model.DashboardCategoryModel
import com.rzrasel.wordquiz.feature.dashboard.data.model.DashboardDataDto
import com.rzrasel.wordquiz.feature.dashboard.domain.model.DashboardDataModel
import com.rzrasel.wordquiz.feature.dashboard.data.model.DashboardDto
import com.rzrasel.wordquiz.feature.dashboard.domain.model.DashboardModel
import com.rzrasel.wordquiz.feature.dashboard.data.model.DashboardQuizItemDto
import com.rzrasel.wordquiz.feature.dashboard.domain.model.DashboardQuizItemModel
import com.rzrasel.wordquiz.feature.dashboard.data.model.DashboardTaskItemDto
import com.rzrasel.wordquiz.feature.dashboard.domain.model.DashboardTaskItemModel
import com.rzrasel.wordquiz.feature.dashboard.data.model.QuizAttemptDto
import com.rzrasel.wordquiz.feature.dashboard.domain.model.QuizAttemptModel

//Mapper (DTO â†’ Model) (DTO To Model)

fun DashboardDto.toDashboardModel(): DashboardModel {
    return DashboardModel(
        type = type,
        message = message,
        data = data?.toDataModel()
    )
}

fun DashboardDataDto.toDataModel(): DashboardDataModel {
    return DashboardDataModel(
        accessToken = accessToken,
        data = data.map { it.toQuizListModel() } as ArrayList<DashboardQuizItemModel>
    )
}

fun DashboardQuizItemDto.toQuizListModel(): DashboardQuizItemModel {
    return DashboardQuizItemModel(
        quizId = quizId,
        quizTitle = quizTitle,
        quizDescription = quizDescription,
        totalQuestions = totalQuestions,
        createdAt = createdAt,
        updatedAt = updatedAt,
        categories = categories.map { it.toCategoryModel() } as ArrayList<DashboardCategoryModel>
    )
}

fun DashboardCategoryDto.toCategoryModel(): DashboardCategoryModel {
    return DashboardCategoryModel(
        categoryId = categoryId,
        categoryTitle = categoryTitle,
        categoryType = categoryType,
        accessMode = accessMode,
        taskItems = taskItems.map { it.toTaskItemModel() } as ArrayList<DashboardTaskItemModel>
    )
}

fun DashboardTaskItemDto.toTaskItemModel(): DashboardTaskItemModel {
    return DashboardTaskItemModel(
        itemId = itemId,
        itemTitle = itemTitle,
        itemSubtitle = itemSubtitle,
        itemButtonLabel = itemButtonLabel,
        accessMode = accessMode,
        itemType = itemType,
        /*quizAttempt = quizAttempt?.toQuizAttemptModel(),
        leaderboard = ArrayList(leaderboard)*/
    )
}

fun QuizAttemptDto.toQuizAttemptModel(): QuizAttemptModel {
    return QuizAttemptModel(
        totalQuestions = totalQuestions,
        correctAnswers = correctAnswers,
        wrongAnswers = wrongAnswers,
        score = score
    )
}

//----- File: dashboard/data/model/DashboardDto.kt -----

package com.rzrasel.wordquiz.feature.dashboard.data.model

import com.google.gson.annotations.SerializedName

data class DashboardDto(
    @SerializedName("type")
    val type: String?,
    @SerializedName("message")
    val message: String?,
    @SerializedName("data")
    var data: DashboardDataDto? = DashboardDataDto(),
)

data class DashboardDataDto(
    @SerializedName("access_token" )
    var accessToken: String? = null,
    @SerializedName("quizzes")
    var data: ArrayList<DashboardQuizItemDto> = arrayListOf(),
)

data class DashboardQuizItemDto(
    @SerializedName("quiz_id")
    var quizId: String? = null,
    @SerializedName("quiz_title")
    var quizTitle: String? = null,
    @SerializedName("quiz_description")
    var quizDescription: String? = null,
    @SerializedName("total_questions")
    var totalQuestions: Int? = null,
    @SerializedName("created_at")
    var createdAt: String? = null,
    @SerializedName("updated_at")
    var updatedAt: String? = null,
    @SerializedName("categories")
    var categories: ArrayList<DashboardCategoryDto> = arrayListOf(),
)

data class DashboardCategoryDto(
    @SerializedName("category_id")
    var categoryId: String? = null,
    @SerializedName("category_title")
    var categoryTitle: String? = null,
    @SerializedName("category_type")
    var categoryType: String? = null,
    @SerializedName("access_mode")
    var accessMode: String? = null,
    @SerializedName("task_items")
    var taskItems: ArrayList<DashboardTaskItemDto> = arrayListOf(),
)

data class DashboardTaskItemDto(
    @SerializedName("item_id")
    var itemId: String? = null,
    @SerializedName("item_title")
    var itemTitle: String? = null,
    @SerializedName("item_subtitle")
    var itemSubtitle: String? = null,
    @SerializedName("item_button_label")
    var itemButtonLabel: String? = null,
    @SerializedName("access_mode")
    var accessMode: String? = null,
    @SerializedName("item_type")
    var itemType: String? = null,
    /*@SerializedName("quiz_attempt")
    var quizAttempt: QuizAttemptDto? = QuizAttemptDto(),
    @SerializedName("leaderboard")
    var leaderboard: ArrayList<String> = arrayListOf(),*/
)

data class QuizAttemptDto(
    @SerializedName("total_questions")
    val totalQuestions: Long? = 0L,
    @SerializedName("correct_answers")
    val correctAnswers: Long? = 0L,
    @SerializedName("wrong_answers")
    val wrongAnswers: Long? = 0L,
    @SerializedName("score")
    val score: Double? = 0.0,
)

//----- File: dashboard/data/model/DashboardRequest.kt -----

package com.rzrasel.wordquiz.feature.dashboard.data.model

import com.google.gson.annotations.SerializedName

data class DashboardRequest(
    @SerializedName("user_auth_token")
    val userAuthToken: String?,
)

//----- File: dashboard/data/repository/DashboardRepositoryImpl.kt -----

package com.rzrasel.wordquiz.feature.dashboard.data.repository

import com.rzrasel.wordquiz.feature.dashboard.data.datasource.DashboardRemoteDataSource
import com.rzrasel.wordquiz.feature.dashboard.data.model.DashboardDto
import com.rzrasel.wordquiz.feature.dashboard.data.model.DashboardRequest
import com.rzrasel.wordquiz.networkstate.NetworkState
import com.rzrasel.wordquiz.feature.dashboard.api.DashboardApiService
import com.rzrasel.wordquiz.feature.dashboard.domain.repository.DashboardRepository

class DashboardRepositoryImpl(
    private val remoteDataSource: DashboardRemoteDataSource
) : DashboardRepository {
    override suspend fun getDashboard(dashboardRequest: DashboardRequest): NetworkState<DashboardDto> {
        return remoteDataSource.getDashboard(dashboardRequest)
    }
}

//----- File: dashboard/di/DashboardModule.kt -----

package com.rzrasel.wordquiz.feature.dashboard.di

import android.content.Context
import com.rzrasel.wordquiz.feature.dashboard.api.DashboardApiService
import com.rzrasel.wordquiz.feature.dashboard.data.datasource.DashboardRemoteDataSource
import com.rzrasel.wordquiz.feature.dashboard.data.datasource.DashboardRemoteDataSourceImpl
import com.rzrasel.wordquiz.feature.dashboard.data.repository.DashboardRepositoryImpl
import com.rzrasel.wordquiz.feature.dashboard.domain.repository.DashboardRepository
import com.rzrasel.wordquiz.feature.dashboard.domain.usecase.DashboardUseCase
import com.rzrasel.wordquiz.feature.dashboard.presentation.viewmodel.DashboardViewModel
import com.rzrasel.wordquiz.network.NetConnectionInterceptor
import com.rzrasel.wordquiz.network.RetrofitClient

object DashboardModule {

    fun provideViewModel(context: Context, userAuthToken: String = ""): DashboardViewModel {
        return DashboardViewModel(
            provideUseCase(
                provideRepository(
                    provideRemoteDataSource(
                        provideApiService(context, userAuthToken)
                    )
                )
            )
        )
    }

    private fun provideApiService(context: Context, userAuthToken: String): DashboardApiService {
        return RetrofitClient().buildApi(
            context = context,
            api = DashboardApiService::class.java,
            netConnectionInterceptor = NetConnectionInterceptor(context),
            authToken = userAuthToken
        )
    }

    private fun provideRemoteDataSource(apiService: DashboardApiService): DashboardRemoteDataSource {
        return DashboardRemoteDataSourceImpl(apiService)
    }

    private fun provideRepository(dataSource: DashboardRemoteDataSource): DashboardRepository {
        return DashboardRepositoryImpl(dataSource)
    }

    private fun provideUseCase(repository: DashboardRepository): DashboardUseCase {
        return DashboardUseCase(repository)
    }
}

//----- File: dashboard/domain/mapper/DashboardDtoMapper.kt -----

package com.rzrasel.wordquiz.feature.dashboard.domain.mapper

import com.rzrasel.wordquiz.feature.dashboard.data.model.DashboardCategoryDto
import com.rzrasel.wordquiz.feature.dashboard.data.model.DashboardDataDto
import com.rzrasel.wordquiz.feature.dashboard.data.model.DashboardDto
import com.rzrasel.wordquiz.feature.dashboard.data.model.DashboardQuizItemDto
import com.rzrasel.wordquiz.feature.dashboard.data.model.DashboardTaskItemDto
import com.rzrasel.wordquiz.feature.dashboard.data.model.QuizAttemptDto
import com.rzrasel.wordquiz.feature.dashboard.domain.model.DashboardCategoryModel
import com.rzrasel.wordquiz.feature.dashboard.domain.model.DashboardDataModel
import com.rzrasel.wordquiz.feature.dashboard.domain.model.DashboardModel
import com.rzrasel.wordquiz.feature.dashboard.domain.model.DashboardQuizItemModel
import com.rzrasel.wordquiz.feature.dashboard.domain.model.DashboardTaskItemModel
import com.rzrasel.wordquiz.feature.dashboard.domain.model.QuizAttemptModel

//Mapper (Model â†’ DTO) (Model To DTO)

fun DashboardModel.toDashboardDto(): DashboardDto {
    return DashboardDto(
        type = type,
        message = message,
        data = data?.toDataDto()
    )
}

fun DashboardDataModel.toDataDto(): DashboardDataDto {
    return DashboardDataDto(
        accessToken = accessToken,
        data = data.map { it.toDataListDto() } as ArrayList<DashboardQuizItemDto>
    )
}

fun DashboardQuizItemModel.toDataListDto(): DashboardQuizItemDto {
    return DashboardQuizItemDto(
        quizId = quizId,
        quizTitle = quizTitle,
        quizDescription = quizDescription,
        totalQuestions = totalQuestions,
        createdAt = createdAt,
        updatedAt = updatedAt,
        categories = categories.map { it.toCategoryDto() } as ArrayList<DashboardCategoryDto>
    )
}

fun DashboardCategoryModel.toCategoryDto(): DashboardCategoryDto {
    return DashboardCategoryDto(
        categoryId = categoryId,
        categoryTitle = categoryTitle,
        categoryType = categoryType,
        accessMode = accessMode,
        taskItems = taskItems.map { it.toTaskItemDto() } as ArrayList<DashboardTaskItemDto>
    )
}

fun DashboardTaskItemModel.toTaskItemDto(): DashboardTaskItemDto {
    return DashboardTaskItemDto(
        itemId = itemId,
        itemTitle = itemTitle,
        itemSubtitle = itemSubtitle,
        itemButtonLabel = itemButtonLabel,
        accessMode = accessMode,
        itemType = itemType,
        /*quizAttempt = quizAttempt?.toQuizAttemptDto(),
        leaderboard = ArrayList(leaderboard)*/
    )
}

fun QuizAttemptModel.toQuizAttemptDto(): QuizAttemptDto {
    return QuizAttemptDto(
        totalQuestions = totalQuestions,
        correctAnswers = correctAnswers,
        wrongAnswers = wrongAnswers,
        score = score
    )
}

//----- File: dashboard/domain/model/DashboardModel.kt -----

package com.rzrasel.wordquiz.feature.dashboard.domain.model

import com.google.gson.annotations.SerializedName

data class DashboardModel(
    @SerializedName("type")
    val type: String?,
    @SerializedName("message")
    val message: String?,
    @SerializedName("data")
    var data: DashboardDataModel? = DashboardDataModel(),
)

data class DashboardDataModel(
    @SerializedName("access_token" )
    var accessToken: String? = null,
    @SerializedName("quizzes")
    var data: ArrayList<DashboardQuizItemModel> = arrayListOf(),
)

data class DashboardQuizItemModel(
    @SerializedName("quiz_id")
    var quizId: String? = null,
    @SerializedName("quiz_title")
    var quizTitle: String? = null,
    @SerializedName("quiz_description")
    var quizDescription: String? = null,
    @SerializedName("total_questions")
    var totalQuestions: Int? = null,
    @SerializedName("created_at")
    var createdAt: String? = null,
    @SerializedName("updated_at")
    var updatedAt: String? = null,
    @SerializedName("categories")
    var categories: ArrayList<DashboardCategoryModel> = arrayListOf(),
)

data class DashboardCategoryModel(
    @SerializedName("category_id")
    var categoryId: String? = null,
    @SerializedName("category_title")
    var categoryTitle: String? = null,
    @SerializedName("category_type")
    var categoryType: String? = null,
    @SerializedName("access_mode")
    var accessMode: String? = null,
    @SerializedName("task_items")
    var taskItems: ArrayList<DashboardTaskItemModel> = arrayListOf(),
)

data class DashboardTaskItemModel(
    @SerializedName("item_id")
    var itemId: String? = null,
    @SerializedName("item_title")
    var itemTitle: String? = null,
    @SerializedName("item_subtitle")
    var itemSubtitle: String? = null,
    @SerializedName("item_button_label")
    var itemButtonLabel: String? = null,
    @SerializedName("access_mode")
    var accessMode: String? = null,
    @SerializedName("item_type")
    var itemType: String? = null,
    /*@SerializedName("quiz_attempt")
    var quizAttempt: QuizAttemptModel? = QuizAttemptModel(),
    @SerializedName("leaderboard")
    var leaderboard: ArrayList<String> = arrayListOf(),*/
)

data class QuizAttemptModel(
    @SerializedName("total_questions")
    val totalQuestions: Long? = 0L,
    @SerializedName("correct_answers")
    val correctAnswers: Long? = 0L,
    @SerializedName("wrong_answers")
    val wrongAnswers: Long? = 0L,
    @SerializedName("score")
    val score: Double? = 0.0,
)


//----- File: dashboard/domain/repository/DashboardRepository.kt -----

package com.rzrasel.wordquiz.feature.dashboard.domain.repository

import com.rzrasel.wordquiz.networkstate.NetworkState
import com.rzrasel.wordquiz.feature.dashboard.data.model.DashboardDto
import com.rzrasel.wordquiz.feature.dashboard.data.model.DashboardRequest

interface DashboardRepository {
    suspend fun getDashboard(dashboardRequest: DashboardRequest): NetworkState<DashboardDto>
}

//----- File: dashboard/domain/usecase/DashboardUseCase.kt -----

package com.rzrasel.wordquiz.feature.dashboard.domain.usecase

import com.rzrasel.wordquiz.feature.dashboard.data.mapper.toDashboardModel
import com.rzrasel.wordquiz.feature.dashboard.data.model.DashboardRequest
import com.rzrasel.wordquiz.feature.dashboard.domain.model.DashboardModel
import com.rzrasel.wordquiz.feature.dashboard.domain.repository.DashboardRepository
import com.rzrasel.wordquiz.networkstate.NetworkState

class DashboardUseCase(private val repository: DashboardRepository) {
    suspend fun execute(userAuthToken: String?): NetworkState<DashboardModel> {
        val userAuthTokenVal: String = userAuthToken ?: ""
        val dashboardRequest = DashboardRequest(
            userAuthToken = userAuthTokenVal.trim(),
        )
        return when (val remoteUser = repository.getDashboard(dashboardRequest)) {
            is NetworkState.Loading -> NetworkState.Loading()
            is NetworkState.Error -> NetworkState.Error(remoteUser.message)
            is NetworkState.Success -> {
                remoteUser.data?.let {
                    NetworkState.Success(it.toDashboardModel())
                } ?: NetworkState.Error("Null data")
            }
        }
    }
}


//----- File: dashboard/presentation/components/composables/DashboardDefaultHeaderLayout.kt -----

package com.rzrasel.wordquiz.feature.dashboard.presentation.components.composables

import androidx.compose.foundation.layout.Column
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import com.rzrasel.wordquiz.presentation.components.components.CustomCheckBox

@Composable
fun DashboardDefaultHeaderLayout(title: String = "") {
    var isChecked by remember { mutableStateOf(false) }

    Column {
        Text(
            text = title,
        )
        CustomCheckBox(
            text = "I agree with the terms & condition I agree with the terms & condition I agree with the terms & condition I agree with the terms & condition I agree with the terms & condition",
            isChecked = isChecked,
            onCheckedChange = {
                isChecked = it
            },
        )
        /*NormalCheckBox(
            modifier = Modifier.fillMaxWidth(),
            label = "Test And assign it to parent with PointerEventPass.Initial with no consume call and will result as",
            state = checkedState,
            onStateChange = {
                checkedState = !checkedState
            }
        )*/
    }
}

//----- File: dashboard/presentation/components/composables/DashboardLazyColumn.kt -----

package com.rzrasel.wordquiz.feature.dashboard.presentation.components.composables

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.wrapContentHeight
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.rzrasel.wordquiz.core.enumtype.CategoryType
import com.rzrasel.wordquiz.feature.dashboard.domain.model.DashboardCategoryModel
import com.rzrasel.wordquiz.feature.dashboard.domain.model.DashboardModel
import com.rzrasel.wordquiz.feature.dashboard.domain.model.DashboardTaskItemModel
import com.rzrasel.wordquiz.presentation.screens.data.UserModel
import com.rzrasel.wordquiz.presentation.screens.data.UserTaskItemModel

@Composable
fun DashboardLazyColumn(
    userModel: UserModel,
    dashboardModel: DashboardModel,
    onClickTaskItem: (DashboardCategoryModel, DashboardTaskItemModel, UserTaskItemModel)-> Unit,
) {
    val listState = rememberLazyListState()
    LazyColumn(
        modifier = Modifier
            .fillMaxWidth()
            .wrapContentHeight(),
        state = listState,
        contentPadding = PaddingValues(vertical = 10.dp),
        verticalArrangement = Arrangement.spacedBy(16.dp),
    ) {
        dashboardModel.data?.data?.forEach{ quizItem ->
            items(quizItem.categories, key = { category -> category.categoryId!! }) { category ->
                val categoryType: CategoryType = CategoryType.find(category.categoryType)
                val categoryTitle = category.categoryTitle ?: ""
                if (categoryType == CategoryType.DEFAULT) {
                    DashboardDefaultHeaderLayout(categoryTitle)
                } else {
                    DashboardTaskCategoryHeaderLayout(categoryTitle)
                }
                Column(
                    modifier = Modifier
                        .wrapContentHeight(),
                    verticalArrangement = Arrangement.spacedBy(8.dp),
                ) {
                    category.taskItems.forEach { item ->
                        val itemTitle = item.itemTitle ?: ""
                        val itemSubtitle = item.itemSubtitle ?: ""
                        val itemButtonLabel = item.itemButtonLabel ?: ""
                        if(categoryType == CategoryType.LIVE_QUIZ || categoryType == CategoryType.REGULAR_QUIZ || categoryType == CategoryType.PRACTICE || categoryType == CategoryType.READING) {
                            category.categoryId?.let {
                                item.itemId?.let { it1 ->
                                    TaskRegularItemBodyLayout(
                                        taskCategoryModel = category,
                                        taskItemModel = item,
                                        userModel = userModel,
                                        categoryId = it,
                                        itemId = it1,
                                        itemTitle,
                                        itemSubtitle,
                                        itemButtonLabel,
                                        onClickTaskItem = onClickTaskItem,
                                    )
                                }
                            }
                        }
                    }
                }
            }
        }
        /*items(dashboardModel.taskCategory, key = { category -> category.categoryId }) { category ->
            val categoryType: CategoryType = CategoryType.find(category.categoryType)
            val categoryTitle = category.categoryTitle ?: ""
            if (categoryType == CategoryType.DEFAULT) {
                DashboardDefaultHeaderLayout(categoryTitle)
            } else {
                DashboardTaskCategoryHeaderLayout(categoryTitle)
            }
            Column(
                modifier = Modifier
                    .wrapContentHeight(),
                verticalArrangement = Arrangement.spacedBy(8.dp),
            ) {
                category.taskItems.forEach { item ->
                    val itemTitle = item.itemTitle ?: ""
                    val itemSubtitle = item.itemSubtitle ?: ""
                    val itemButtonLabel = item.itemButtonLabel ?: ""
                    if(categoryType == CategoryType.LIVE_QUIZ || categoryType == CategoryType.REGULAR_QUIZ || categoryType == CategoryType.PRACTICE || categoryType == CategoryType.READING) {
                        TaskRegularItemBodyLayout(
                            taskCategoryModel = category,
                            taskItemModel = item,
                            userModel = userModel,
                            categoryId = category.categoryId,
                            itemId = item.itemId,
                            itemTitle,
                            itemSubtitle,
                            itemButtonLabel,
                            onClickTaskItem = onClickTaskItem,
                        )
                    }
                }
            }
        }*/
    }
}

@Composable
fun TaskItemBodyLayout(title: String = "") {
    Text(
        text = title,
        modifier = Modifier
            .padding(0.dp)
            .fillMaxWidth(),
        fontSize = 14.sp,
        fontWeight = FontWeight.Normal,
    )
}

@Composable
fun DashboardLazyColumnOld1(dashboardLayoutData: ArrayList<DashboardLayoutData<*>>) {
    val listState = rememberLazyListState()
    LazyColumn(
        modifier = Modifier
            .fillMaxWidth()
            .wrapContentHeight(),
        state = listState,
        contentPadding = PaddingValues(vertical = 10.dp),
        verticalArrangement = Arrangement.spacedBy(16.dp),
    ) {
        items(
            dashboardLayoutData,
            key = { category -> category.id },
        ) { category ->
            category.header
            /*Column(
                modifier = Modifier
                    .wrapContentHeight()
            ) {
                if (category.body.isNotEmpty()) {
                    category.body.forEach {
                        it
                    }
                }
            }*/
        }
    }
}

data class DashboardLayoutData<T>(
    val id: String,
    val header: T,
    val body: ArrayList<T> = arrayListOf(),
)

@Composable
fun DashboardLazyColumnOld1(dashboardModel: DashboardModel) {
    val dashboardLayout: ArrayList<DashboardLayoutData<*>> = ArrayList()
    var layout: DashboardLayoutData<*> = DashboardLayoutData(
        id = "default_header_layout",
        header = DashboardDefaultHeaderLayout(),
        body = arrayListOf()
    )
    dashboardLayout.add(layout)
    dashboardLayout.forEach { item ->
        item.header
    }
}

//----- File: dashboard/presentation/components/composables/DashboardTaskCategoryHeaderLayout.kt -----

package com.rzrasel.wordquiz.feature.dashboard.presentation.components.composables

import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

@Composable
fun DashboardTaskCategoryHeaderLayout(title: String = "") {
    Column(
        modifier = Modifier
            .fillMaxWidth(),
    ) {
        Text(
            text = title,
            modifier = Modifier
                .padding(0.dp)
                .fillMaxWidth(),
            fontSize = 14.sp,
            fontWeight = FontWeight.Bold,
        )
        Spacer(modifier = Modifier.height(8.dp))
    }
}

//----- File: dashboard/presentation/components/composables/LazyColumnTest.kt -----

package com.rzrasel.wordquiz.feature.dashboard.presentation.components.composables

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.layout.wrapContentHeight
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import com.rzrasel.wordquiz.feature.dashboard.domain.model.DashboardModel

@Composable
fun LazyColumnTest(dashboardModel: DashboardModel) {
    val listState = rememberLazyListState()
    LazyColumn(
        modifier = Modifier
            .fillMaxWidth()
            .wrapContentHeight(),
        state = listState,
        contentPadding = PaddingValues(vertical = 10.dp),
        verticalArrangement = Arrangement.spacedBy(16.dp),
    ) {
        /*items(dashboardModel.taskCategory, key = { category -> category.categoryId }) { category ->
            category.categoryTitle?.let { categoryTitle ->
                Text(
                    text = categoryTitle,
                    modifier = Modifier
                        .padding(0.dp)
                        .fillMaxWidth(),
                    fontSize = 14.sp,
                    fontWeight = FontWeight.Bold,
                )
            }
            Column(
                modifier = Modifier
                    .wrapContentHeight()
            ) {
                category.taskItems.forEach { item ->
                    item.itemTitle?.let { itemTitle ->
                        Text(
                            text = itemTitle,
                            modifier = Modifier
                                .padding(0.dp)
                                .fillMaxWidth(),
                            fontSize = 14.sp,
                            fontWeight = FontWeight.Normal,
                        )
                    }
                }
            }
        }*/
    }
}

@Composable
fun LazyColumnTestOld4(dashboardModel: DashboardModel) {
    val listState = rememberLazyListState()
    val scrollState = rememberScrollState()
    Column(
        modifier = Modifier
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
    ) {
        /*dashboardModel.taskCategory.forEach{ category ->
            category.categoryTitle?.let { categoryTitle ->
                Text(
                    text = categoryTitle,
                    modifier = Modifier
                        .padding(0.dp)
                        .fillMaxWidth(),
                    fontSize = 14.sp,
                    fontWeight = FontWeight.Bold,
                )
            }
            Column(
                modifier = Modifier
                    .wrapContentHeight()
            ) {
                category.taskItems.forEach { item ->
                    item.itemTitle?.let { itemTitle ->
                        Text(
                            text = itemTitle,
                            modifier = Modifier
                                .padding(0.dp)
                                .fillMaxWidth(),
                            fontSize = 14.sp,
                            fontWeight = FontWeight.Normal,
                        )
                    }
                }
            }
        }*/
    }
}

@Composable
fun LazyColumnTestOld3(dashboardModel: DashboardModel) {
    val listState = rememberLazyListState()
    val scrollState = rememberScrollState()
    Column(
        modifier = Modifier
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
    ) {
        /*dashboardModel.taskCategory.forEach{ category ->
            category.categoryTitle?.let { categoryTitle ->
                Text(
                    text = categoryTitle,
                    modifier = Modifier
                        .padding(0.dp)
                        .fillMaxWidth(),
                    fontSize = 14.sp,
                    fontWeight = FontWeight.Bold,
                )
            }
            LazyColumn(
                modifier = Modifier
                    .fillMaxWidth()
                    .verticalScroll(scrollState)
                    .height(IntrinsicSize.Max),
                verticalArrangement = Arrangement.spacedBy(8.dp),
            ) {
                items(category.taskItems, key = { item -> item.itemId }) { item ->
                    item.itemTitle?.let { itemTitle ->
                        Text(
                            text = itemTitle,
                            modifier = Modifier
                                .padding(0.dp)
                                .fillMaxWidth(),
                            fontSize = 14.sp,
                            fontWeight = FontWeight.Normal,
                        )
                    }
                }
            }
        }*/
        /*repeat(1000) {
            Text(text = "Hello $it")
        }*/
    }
}

@Composable
fun LazyColumnTestOld2(dashboardModel: DashboardModel) {
    val listState = rememberLazyListState()
    LazyColumn(
        modifier = Modifier
            .width(600.dp),
        state = listState,
        contentPadding = PaddingValues(vertical = 10.dp),
        verticalArrangement = Arrangement.spacedBy(16.dp),
    ) {
        /*itemsIndexed(
            dashboardModel.taskCategory
        ) { index, category ->
            Column(
                modifier = Modifier
                    .fillMaxWidth(),
            ) {
                category.categoryTitle?.let { categoryTitle ->
                    Text(
                        text = categoryTitle,
                        modifier = Modifier
                            .padding(0.dp)
                            .fillMaxWidth(),
                        fontSize = 14.sp,
                        fontWeight = FontWeight.Bold,
                    )
                    LazyColumn(
                        verticalArrangement = Arrangement.spacedBy(8.dp)
                    ) {
                        itemsIndexed(category.taskItems) { index, item ->
                            item.itemTitle?.let { itemTitle ->
                                Text(
                                    text = itemTitle,
                                    modifier = Modifier
                                        .padding(0.dp)
                                        .fillMaxWidth(),
                                    fontSize = 14.sp,
                                    fontWeight = FontWeight.Normal,
                                )
                            }
                        }
                    }
                }
            }
        }*/
    }
}

@Composable
fun LazyColumnTestOld01(dashboardModel: DashboardModel) {
    val listState = rememberLazyListState()
    LazyColumn(
        modifier = Modifier.fillMaxWidth(),
        state = listState,
        contentPadding = PaddingValues(vertical = 10.dp),
        verticalArrangement = Arrangement.spacedBy(16.dp),
    ) {
        /*items(dashboardModel.taskCategory) { category ->
            category.categoryTitle?.let { categoryTitle ->
                Text(
                    text = categoryTitle,
                    modifier = Modifier
                        .padding(0.dp)
                        .fillMaxWidth(),
                    fontSize = 14.sp,
                    fontWeight = FontWeight.Bold,
                )
                LazyColumn(
                    modifier = Modifier.fillMaxWidth(),
                    verticalArrangement = Arrangement.spacedBy(8.dp),
                ) {
                    items(category.taskItems, key = { item -> item.itemId }) { item ->
                        item.itemTitle?.let { itemTitle ->
                            Text(
                                text = itemTitle,
                                modifier = Modifier
                                    .padding(0.dp)
                                    .fillMaxWidth(),
                                fontSize = 14.sp,
                                fontWeight = FontWeight.Normal,
                            )
                        }
                    }
                }
            }
        }*/
        /*//val dashboardModel: DashboardModel = (viewModel.uiState as DashboardUiState.Success).dashboardModel
        val dashboardModel: DashboardModel? = viewModel.dashboardModel.value
        if (dashboardModel != null) {
            items(dashboardModel.items) { item ->
                item.title?.let {
                    Text(
                        text = it,
                        modifier = Modifier
                            .padding(8.dp)       // Add padding around each item
                            .fillMaxWidth(),     // Make each item fill the available width
                        style = MaterialTheme.typography.bodyLarge
                    )
                }
            }
        }*/
    }
}

/*
// Iterate over the list of users
items(users, key = { user -> user.id }) { user ->
// Display each user using the UserItem composable
UserItem(user)
}*/
/*
https://www.droidcon.com/2023/01/23/nested-scroll-with-jetpack-compose/
https://stackoverflow.com/questions/75190976/how-to-achieve-multiple-header-and-body-elements-list-for-a-lazycolumn-in-compos
https://blog.kotlin-academy.com/nested-lazycolumn-in-jetpack-compose-79cc5d56c603
*/

//----- File: dashboard/presentation/components/composables/TaskRegularItemBodyLayout.kt -----

package com.rzrasel.wordquiz.feature.dashboard.presentation.components.composables

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.wrapContentWidth
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.core.graphics.toColorInt
import com.rzrasel.wordquiz.presentation.components.components.ButtonComposable
import com.rzrasel.wordquiz.feature.dashboard.domain.model.DashboardCategoryModel
import com.rzrasel.wordquiz.feature.dashboard.domain.model.DashboardTaskItemModel
import com.rzrasel.wordquiz.presentation.screens.data.UserModel
import com.rzrasel.wordquiz.presentation.screens.data.UserTaskItemModel

@Composable
fun TaskRegularItemBodyLayout(
    taskCategoryModel: DashboardCategoryModel,
    taskItemModel: DashboardTaskItemModel,
    userModel: UserModel,
    categoryId: String = "",
    itemId: String = "",
    title: String = "",
    subtitle: String = "",
    itemButtonLabel: String = "",
    onClickTaskItem: (DashboardCategoryModel, DashboardTaskItemModel, UserTaskItemModel)-> Unit,
) {
    Column(
        modifier = Modifier
            .fillMaxWidth(),
    ) {
        Card(
            modifier = Modifier
                .padding(1.dp)
                //.background(Color.Transparent)
                .background(Color("#ffffff".toColorInt()))
                .fillMaxWidth(),
            shape = RoundedCornerShape(10.dp),
            elevation = CardDefaults.cardElevation(4.dp),
        ) {
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .background(
                        color = Color("#ffffff".toColorInt()),
                        shape = RoundedCornerShape(4.dp)
                    )
                    .clip(
                        shape = RoundedCornerShape(4.dp)
                    )
                    .padding(8.dp),
            ) {
                Column(
                    modifier = Modifier
                        .fillMaxWidth()
                        .background(Color("#ffffff".toColorInt())),
                ) {
                    Text(
                        text = title,
                        modifier = Modifier
                            .padding(0.dp)
                            .fillMaxWidth(),
                        fontSize = 14.sp,
                        fontWeight = FontWeight.Bold,
                    )
                    Row(
                        modifier = Modifier
                            .fillMaxWidth(),
                    ) {
                        Column(
                            modifier = Modifier
                                .weight(1.0f, true)
                                .padding(end = 6.dp),
                        ) {
                            Text(
                                text = subtitle,
                                modifier = Modifier
                                    .padding(0.dp)
                                    .fillMaxWidth(),
                                fontSize = 14.sp,
                                fontWeight = FontWeight.Normal,
                            )
                        }
                        Column(
                            modifier = Modifier
                                .wrapContentWidth(),
                        ) {
                            ButtonComposable(
                                modifier = Modifier
                                    .background(Color("#ffffff".toColorInt()))
                                    .wrapContentWidth(),
                                backgroundColor = Color.White,
                                contentColor = Color(0xFF172644),
                                cornerRadius = 6.dp,
                                borderStroke = 0.dp,
                                borderStrokeColor = Color.Transparent,
                                labelModifier = Modifier
                                    .wrapContentWidth(),
                                text = itemButtonLabel,
                                fontWeight = FontWeight.Normal,
                                fontSize = 12,
                                onClick = {
                                    val userTaskItem = UserTaskItemModel(
                                        userAuthToken = userModel.userAuthToken ?: "",
                                        categoryId = categoryId,
                                        categoryType = taskCategoryModel.categoryType ?: "",
                                        itemId = itemId,
                                        accessMode = taskItemModel.accessMode ?: "",
                                    )
                                    onClickTaskItem(taskCategoryModel, taskItemModel, userTaskItem)
                                },
                            )
                            /*NormalOutlinedButton(
                                modifier = Modifier
                                    .wrapContentWidth(),
                                roundedCorner = 6,
                                borderStroke = 1.dp,
                                borderStrokeColor = Color.Red,
                                label = "Test",
                                onClick = {}
                            )*/
                            /*ButtonComposable(
                                modifier = Modifier
                                    .background(Color("#ffffff".toColorInt()))
                                    .wrapContentWidth(),
                                backgroundColor = Color.White,
                                contentColor = Color(0xFF172644),
                                cornerRadius = 6.dp,
                                borderStroke = 0.dp,
                                borderStrokeColor = Color.Transparent,
                                labelModifier = Modifier
                                    .wrapContentWidth(),
                                text = itemButtonLabel,
                                fontWeight = FontWeight.Normal,
                                fontSize = 12,
                                onClick = {
                                    val userTaskItem = UserTaskItemModel(
                                        userAuthToken = userModel.userAuthToken ?: "",
                                        categoryId = categoryId,
                                        categoryType = taskCategoryModel.categoryType,
                                        itemId = itemId,
                                        accessMode = taskItemModel.accessMode,
                                    )
                                    onClickTaskItem(taskCategoryModel, taskItemModel, userTaskItem)
                                },
                            )*/
                            /*NormalOutlinedButton(
                                modifier = Modifier
                                    .wrapContentWidth(),
                                roundedCorner = 6,
                                borderStroke = 1.dp,
                                borderStrokeColor = Color.Red,
                                label = "Test",
                                onClick = {}
                            )*/
                        }
                    }
                }
            }
        }
        Spacer(modifier = Modifier.height(4.dp))
    }
}

//----- File: dashboard/presentation/screen/AppDashboardScreen.kt -----

package com.rzrasel.wordquiz.feature.dashboard.presentation.screen

import android.app.Application
import android.widget.Toast
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.platform.LocalContext
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import com.rzrasel.wordquiz.feature.dashboard.di.DashboardModule
import com.rzrasel.wordquiz.feature.dashboard.presentation.state.DashboardUiState
import com.rzrasel.wordquiz.presentation.components.dialog.LoadingDialog
import com.rzrasel.wordquiz.presentation.screens.data.UserModel
import com.rzrasel.wordquiz.presentation.screens.data.UserTaskItemModel

@Composable
fun AppDashboardScreen(
    application: Application,
    userModel: UserModel = UserModel(""),
    onNavigateToFlatReading: (UserTaskItemModel) -> Unit,
    onNavigateToTaskItem: (UserTaskItemModel) -> Unit,
) {
    val context = LocalContext.current
    val viewModel = remember {
        DashboardModule.provideViewModel(
            context = application.applicationContext,
            userAuthToken = userModel.userAuthToken ?: ""
        )
    }

    val uiState by viewModel.uiState.collectAsStateWithLifecycle()
    val isRefreshing by viewModel.isRefreshing.collectAsStateWithLifecycle()
    var showLoadingDialog by remember { mutableStateOf(false) }

    // Handle initial load
    LaunchedEffect(Unit) {
        if (viewModel.dashboardModel == null) {
            viewModel.getDashboard(userModel.userAuthToken)
        }
    }

    // Handle UI state changes
    when (uiState) {
        DashboardUiState.Idle -> {
            // Initial state
        }
        is DashboardUiState.Loading -> {
            // Only show loading dialog for initial load, not for refresh
            if (!isRefreshing) {
                showLoadingDialog = true
            }
        }
        is DashboardUiState.Success -> {
            showLoadingDialog = false
            val dashboardModel = (uiState as DashboardUiState.Success).dashboardModel
            dashboardModel.data?.accessToken?.let { token ->
                userModel.userAuthToken = token
            }

            DashboardScreen(
                viewModel = viewModel,
                userModel = userModel,
                onNavigateToFlatReading = onNavigateToFlatReading,
                onNavigateToTaskItem = onNavigateToTaskItem
            )
        }
        is DashboardUiState.Error -> {
            showLoadingDialog = false
            val message = (uiState as DashboardUiState.Error).message
            if (!isRefreshing) {
                Toast.makeText(context, message, Toast.LENGTH_LONG).show()
            }
            DashboardErrorScreen(
                viewModel = viewModel,
                userModel = userModel,
            )
        }
    }

    if (showLoadingDialog) {
        LoadingDialog(
            message = "Please wait...",
            onDismiss = { showLoadingDialog = false }
        )
    }
}


//----- File: dashboard/presentation/screen/DashboardErrorScreen.kt -----

package com.rzrasel.wordquiz.feature.dashboard.presentation.screen

import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import com.google.accompanist.swiperefresh.SwipeRefresh
import com.google.accompanist.swiperefresh.rememberSwipeRefreshState
import com.rzrasel.wordquiz.feature.dashboard.presentation.state.DashboardUiState
import com.rzrasel.wordquiz.feature.dashboard.presentation.viewmodel.DashboardViewModel
import com.rzrasel.wordquiz.presentation.components.layout.DefaultScaffold
import com.rzrasel.wordquiz.presentation.screens.data.UserModel
import com.rzrasel.wordquiz.ui.theme.AppTheme

@Composable
fun DashboardErrorScreen(
    viewModel: DashboardViewModel,
    userModel: UserModel,
) {
    val isRefreshing by viewModel.isRefreshing.collectAsStateWithLifecycle()
    val swipeRefreshState = rememberSwipeRefreshState(isRefreshing = isRefreshing)
    val uiState by viewModel.uiState.collectAsStateWithLifecycle()

    LaunchedEffect(swipeRefreshState.isRefreshing) {
        if (swipeRefreshState.isRefreshing) {
            viewModel.refreshDashboard(userModel.userAuthToken)
        }
    }

    DefaultScaffold {
        SwipeRefresh(
            state = swipeRefreshState,
            onRefresh = { viewModel.refreshDashboard(userModel.userAuthToken) },
            modifier = Modifier.fillMaxSize()
        ) {
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(horizontal = AppTheme.dimens.paddingLarge)
                    .padding(bottom = AppTheme.dimens.paddingExtraLarge)
            ) {
                Text(
                    text = (uiState as DashboardUiState.Error).message,
                    fontSize = 16.sp,
                    textAlign = TextAlign.Center,
                    modifier = Modifier.padding(16.dp)
                )
            }
        }
    }
}

//----- File: dashboard/presentation/screen/DashboardScreen.kt -----

package com.rzrasel.wordquiz.feature.dashboard.presentation.screen

import android.widget.Toast
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import com.google.accompanist.swiperefresh.SwipeRefresh
import com.google.accompanist.swiperefresh.rememberSwipeRefreshState
import com.rzrasel.wordquiz.core.enumtype.CategoryType
import com.rzrasel.wordquiz.feature.dashboard.presentation.components.composables.DashboardLazyColumn
import com.rzrasel.wordquiz.feature.dashboard.presentation.state.DashboardNavigateScreenState
import com.rzrasel.wordquiz.feature.dashboard.presentation.state.DashboardUiState
import com.rzrasel.wordquiz.feature.dashboard.presentation.viewmodel.DashboardViewModel
import com.rzrasel.wordquiz.navigation.NavigationRouteHelper
import com.rzrasel.wordquiz.presentation.components.layout.DefaultScaffold
import com.rzrasel.wordquiz.presentation.screens.data.UserModel
import com.rzrasel.wordquiz.presentation.screens.data.UserTaskItemModel
import com.rzrasel.wordquiz.ui.theme.AppTheme

@Composable
fun DashboardScreen(
    viewModel: DashboardViewModel,
    userModel: UserModel,
    onNavigateToFlatReading: (UserTaskItemModel) -> Unit,
    onNavigateToTaskItem: (UserTaskItemModel) -> Unit,
) {
    val context = LocalContext.current
    val isRefreshing by viewModel.isRefreshing.collectAsStateWithLifecycle()
    val swipeRefreshState = rememberSwipeRefreshState(isRefreshing = isRefreshing)
    val uiState by viewModel.uiState.collectAsStateWithLifecycle()

    var clickedUserTaskItem by remember {
        mutableStateOf(
            UserTaskItemModel(
                userAuthToken = userModel.userAuthToken ?: "",
                categoryId = "",
                categoryType = "",
                itemId = "",
                accessMode = "",
            )
        )
    }

    var dashboardScreenState by remember {
        mutableStateOf<DashboardNavigateScreenState>(DashboardNavigateScreenState.Idle)
    }

    // Handle navigation events
    when (dashboardScreenState) {
        is DashboardNavigateScreenState.FlatReading -> {
            NavigationRouteHelper(
                shouldNavigate = { true },
                destination = { onNavigateToFlatReading(clickedUserTaskItem) }
            )
            dashboardScreenState = DashboardNavigateScreenState.Idle
        }
        is DashboardNavigateScreenState.FlatPractice -> {
            NavigationRouteHelper(
                shouldNavigate = { true },
                destination = { onNavigateToTaskItem(clickedUserTaskItem) }
            )
            dashboardScreenState = DashboardNavigateScreenState.Idle
        }
        else -> Unit // Do nothing for idle state
    }

    DefaultScaffold {
        SwipeRefresh(
            state = swipeRefreshState,
            onRefresh = { viewModel.refreshDashboard(userModel.userAuthToken) },
            modifier = Modifier.fillMaxSize()
        ) {
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(horizontal = AppTheme.dimens.paddingLarge)
                    .padding(bottom = AppTheme.dimens.paddingExtraLarge)
            ) {
                when (uiState) {
                    is DashboardUiState.Success -> {
                        viewModel.dashboardModel?.let { dashboardModel ->
                            DashboardLazyColumn(
                                userModel = userModel,
                                dashboardModel = dashboardModel,
                                onClickTaskItem = { taskCategoryModel, taskItemModel, userTaskItem ->
                                    clickedUserTaskItem = userTaskItem
                                    when (CategoryType.find(taskCategoryModel.categoryType)) {
                                        CategoryType.READING -> {
                                            dashboardScreenState = DashboardNavigateScreenState.FlatReading(true)
                                        }
                                        CategoryType.PRACTICE -> {
                                            dashboardScreenState = DashboardNavigateScreenState.FlatPractice(true)
                                        }
                                        else -> {
                                            Toast.makeText(context, "Coming soon", Toast.LENGTH_LONG).show()
                                        }
                                    }
                                }
                            )
                        }
                    }
                    else -> {
                        // Show loading or idle state if needed
                    }
                }
            }
        }
    }
}

//----- File: dashboard/presentation/state/DashboardNavigateScreenState.kt -----

package com.rzrasel.wordquiz.feature.dashboard.presentation.state

sealed class DashboardNavigateScreenState {
    data object Idle: DashboardNavigateScreenState()
    data class FlatReading(val isNavigate: Boolean = false): DashboardNavigateScreenState()
    data class FlatPractice(val isNavigate: Boolean = false): DashboardNavigateScreenState()
}

//----- File: dashboard/presentation/state/DashboardUiState.kt -----

package com.rzrasel.wordquiz.feature.dashboard.presentation.state

import com.rzrasel.wordquiz.feature.dashboard.domain.model.DashboardModel

sealed class DashboardUiState {
    data object Idle: DashboardUiState()
    data object Loading: DashboardUiState()
    data class Success(val dashboardModel: DashboardModel) : DashboardUiState()
    data class Error(val message: String): DashboardUiState()
}

//----- File: dashboard/presentation/viewmodel/DashboardViewModel.kt -----

package com.rzrasel.wordquiz.feature.dashboard.presentation.viewmodel

import androidx.compose.runtime.mutableStateOf
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.rz.logwriter.LogWriter
import com.rzrasel.wordquiz.feature.dashboard.domain.model.DashboardModel
import com.rzrasel.wordquiz.feature.dashboard.domain.usecase.DashboardUseCase
import com.rzrasel.wordquiz.feature.dashboard.presentation.state.DashboardUiState
import com.rzrasel.wordquiz.networkstate.NetworkState
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

class DashboardViewModel(
    private val useCase: DashboardUseCase
) : ViewModel() {
    private val _uiState = MutableStateFlow<DashboardUiState>(DashboardUiState.Idle)
    val uiState: StateFlow<DashboardUiState> = _uiState.asStateFlow()

    private val _dashboardModel = mutableStateOf<DashboardModel?>(null)
    val dashboardModel: DashboardModel? get() = _dashboardModel.value

    private val _isRefreshing = MutableStateFlow(false)
    val isRefreshing: StateFlow<Boolean> = _isRefreshing.asStateFlow()

    private var isInitialLoad = false

    fun getDashboard(userAuthToken: String? = null, forceRefresh: Boolean = false) {
        if (!isInitialLoad || forceRefresh) {
            viewModelScope.launch(Dispatchers.IO) {
                _isRefreshing.value = true
                _uiState.value = DashboardUiState.Loading

                when (val result = useCase.execute(userAuthToken)) {
                    is NetworkState.Success -> {
                        LogWriter.log("Success Data ${result.data}")
                        _dashboardModel.value = result.data
                        result.data?.let {
                            _uiState.value = DashboardUiState.Success(it)
                            isInitialLoad = true
                        } ?: run {
                            _uiState.value = DashboardUiState.Error("Null data")
                        }
                    }
                    is NetworkState.Error -> {
                        _uiState.value = DashboardUiState.Error(result.message ?: "Unknown error")
                    }
                    is NetworkState.Loading -> {
                        // Handle loading if needed
                    }
                }
                _isRefreshing.value = false
            }
        }
    }

    fun refreshDashboard(userAuthToken: String? = null) {
        getDashboard(userAuthToken, true)
    }
}

//----- File: factory/ViewModelFactory.kt -----

package com.rzrasel.wordquiz.factory

class ViewModelFactory {
}

/*
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import com.rzrasel.rztutorial.repository.AuthRepository
import com.rzrasel.rztutorial.repository.BaseRepository
import com.rzrasel.rztutorial.repository.RegistrationRepository
import com.rzrasel.rztutorial.repository.UserRepository
import com.rzrasel.rztutorial.viewmodel.AuthViewModel
import com.rzrasel.rztutorial.viewmodel.DashboardViewModel
import com.rzrasel.rztutorial.viewmodel.RegistrationViewModel
import java.lang.IllegalArgumentException

class ViewModelFactory(private val repository: BaseRepository): ViewModelProvider.NewInstanceFactory() {
    //override fun <T : ViewModel?> create(modelClass: Class<T>): T {
    override fun <T : ViewModel> create(modelClass: Class<T>): T {
        return when {
            modelClass.isAssignableFrom(AuthViewModel::class.java) -> AuthViewModel(repository as AuthRepository) as T
            modelClass.isAssignableFrom(RegistrationViewModel::class.java) -> RegistrationViewModel(repository as RegistrationRepository) as T
            modelClass.isAssignableFrom(DashboardViewModel::class.java) -> DashboardViewModel(repository as UserRepository) as T
            else -> throw IllegalArgumentException("ViewModelClass not found")
        }
    }
}*/


//----- File: network/NetConnectionInterceptor.kt -----

package com.rzrasel.wordquiz.network

import android.content.Context
import android.net.ConnectivityManager
import okhttp3.Interceptor
import okhttp3.Response
import java.io.IOException

class NetConnectionInterceptor(context: Context): Interceptor {
    private val context = context.applicationContext

    override fun intercept(chain: Interceptor.Chain): Response {
        if(!isAvailable()) {
            throw IOException("Make sure your internet connection is available")
        }
        return chain.proceed(chain.request())
    }

    private fun isAvailable(): Boolean {
        /*val connectivityManager = context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager
        connectivityManager.activeNetworkInfo.also {
            return it != null && it.isConnected
        }*/
        val connectivityManager = context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager
        val network =connectivityManager.activeNetwork
        return network != null
    }
    //https://dev.to/theplebdev/using-retrofit-interceptors-to-check-network-connection-in-android-and-testing-it-1kl1
}

//----- File: network/RetrofitClient.kt -----

package com.rzrasel.wordquiz.network

import android.content.Context
import android.provider.SyncStateContract.Constants
import androidx.compose.ui.unit.Constraints
import com.rzrasel.wordquiz.BuildConfig
import com.rzrasel.wordquiz.core.utils.AppConstants
import com.rzrasel.wordquiz.core.utils.BuildInfo
import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import java.util.concurrent.TimeUnit

class RetrofitClient {
    companion object {
        private const val CONNECT_TIMEOUT = 30L
        private const val READ_TIMEOUT = 30L
        private const val WRITE_TIMEOUT = 30L
    }

    fun <Api> buildApi(
        context: Context,
        api: Class<Api>,
        netConnectionInterceptor: NetConnectionInterceptor,
        authToken: String? = null
    ): Api {
        val baseUrl: String = AppConstants.Http.BASE_URL

        return Retrofit.Builder()
            .baseUrl(baseUrl)
            .client(createOkHttpClient(context, netConnectionInterceptor, authToken))
            .addConverterFactory(GsonConverterFactory.create())
            .build()
            .create(api)
    }

    private fun createOkHttpClient(
        context: Context,
        netConnectionInterceptor: NetConnectionInterceptor,
        authToken: String?
    ): OkHttpClient {
        return OkHttpClient.Builder()
            .addInterceptor(netConnectionInterceptor)
            .addInterceptor { chain ->
                val request = chain.request().newBuilder().apply {
                    authToken?.takeIf { it.isNotEmpty() }?.let {
                        addHeader("Authorization", "Bearer $it")
                    }
                }.build()
                chain.proceed(request)
            }
            .apply {
                if (BuildInfo.isDebugging(context)) {
                    addInterceptor(HttpLoggingInterceptor().apply {
                        level = HttpLoggingInterceptor.Level.BODY
                    })
                }
            }
            .connectTimeout(CONNECT_TIMEOUT, TimeUnit.SECONDS)
            .readTimeout(READ_TIMEOUT, TimeUnit.SECONDS)
            .writeTimeout(WRITE_TIMEOUT, TimeUnit.SECONDS)
            .build()
    }
}

/*class RetrofitClient {
    fun <Api> buildApi(
        context: Context,
        api: Class<Api>,
        netConnectionInterceptor: NetConnectionInterceptor,
        authToken: String? = null
    ): Api {
        val baseUrl: String = AppConstants.Http.BASE_URL

        val okHttpClient = OkHttpClient.Builder()
            .addInterceptor(netConnectionInterceptor)
            .build()
        return Retrofit.Builder()
            .baseUrl(baseUrl)
            .client(okHttpClient)
            .client(
                OkHttpClient.Builder()
                    .addInterceptor { chain ->
                        chain.proceed(chain.request().newBuilder().also { chainIt ->
                            authToken.let {
                                if(it != null) {
                                    if(it.isNotEmpty()) {
                                        chainIt.addHeader("Authorization", "Bearer $it")
                                    }
                                }
                            }
                        }.build())
                    }.also { client ->
                        //if(BuildConfig.DEBUG) {
                        if(BuildInfo.isDebugging(context)) {
                            val logging = HttpLoggingInterceptor()
                            logging.setLevel(HttpLoggingInterceptor.Level.HEADERS)
                            logging.setLevel(HttpLoggingInterceptor.Level.BODY)
                            client.addInterceptor(logging)
                        }
                    }.build()
            )
            .addConverterFactory(GsonConverterFactory.create())
            .build()
            .create(api)
    }
}*/

//https://medium.com/@1550707241489/how-to-add-headers-to-retrofit-android-kotlin-450da34d3c3a
//https://medium.com/@manoj.cs.iu/dynamic-header-in-retrofit-2-2c351d5ad2ac
/*
private fun okHttpClient(apiKey: ApiKey) = OkHttpClient().newBuilder()
.addInterceptor(
    object : Interceptor {
        override fun intercept(chain: Interceptor.Chain): Response {
            val request: Request = chain.request()
                .newBuilder()
                .header("accept", "application/json")
                .header("Authorization", "${apiKey.value}")
                .build()
            return chain.proceed(request)
        }
    }
)
fun getUnsafeOkHttpClient(): OkHttpClient {
    val interceptor = HttpLoggingInterceptor()
    interceptor.level = HttpLoggingInterceptor.Level.HEADERS
    interceptor.level = HttpLoggingInterceptor.Level.BODY
    val builder = OkHttpClient.Builder()
    builder.addInterceptor(interceptor)
            .connectTimeout(20, TimeUnit.SECONDS)
            .readTimeout(20, TimeUnit.SECONDS)
            .addInterceptor(SupportInterceptor())
            .authenticator(SupportInterceptor())
    return builder.build()
}
*/
/*
class ApiInstance {
    companion object {
        private val retrofitBuilder: Retrofit.Builder =
            Retrofit.Builder()
                .baseUrl(BASE_URL)
                .addConverterFactory(GsonConverterFactory.create())
    }

    private val retrofit:Retrofit = builder.build()

    private val httpClient: OkHttpClient.Builder
            = OkHttpClient.Builder()

    fun <T> createService(serviceClass: Class<T>): T {
        return retrofit.create(serviceClass)
    }
}

val service: UserService = ApiInstance.createService(UserService::class.java)
*/

/*


https://medium.com/@KaushalVasava/retrofit-in-android-5a28c8e988ce

https://medium.com/@ramadan123sayed/a-deep-dive-into-mvvm-with-jetpack-compose-3b1e9deaa843

https://github.com/rzrasel/kotlin-mvvm-repository-factory-login-one-tutorial
*/

//----- File: networkstate/NetworkState.kt -----

package com.rzrasel.wordquiz.networkstate

sealed class NetworkState<T>(val data: T? = null, val message: String? = null) {
    class Success<T>(data: T?): NetworkState<T>(data)
    class Loading<T>(data: T? = null): NetworkState<T>(data)
    class Error<T>(message: String?, data: T? = null): NetworkState<T>(data, message)
}
/*
enum class DayOfWeek(val dayNumber: Int) {
  MONDAY(1), TUESDAY(2), WEDNESDAY(3), THURSDAY(4),
  FRIDAY(5), SATURDAY(6), SUNDAY(7)
}


*/





- stop reload again when back to dashboard screen
- stop reload again when back from other scree to dashboard screen
- stop reload again background to foreground to dashboard screen
- stop show showLoadingDialog when back to dashboard screen

*** manual dependency injection
*** provide import statements
*** code refactor if better options
*** Don't change class name if not needed
*** Don't change unwanted codebase
*** Provide Full Codebase
*** read full document properly


Version - 1.0.0

- give full directory structure first
- convert in mvvm clean architecture
- restructure refactor directory structure as mvvm clean architecture
- code 
- use manual dependency injection
- use mapper directory for data mapper, mapper for both data and domain
- don't make data mapper a mapper class it just data and domain model class extension
- use NetConnectionInterceptor, RetrofitClient, NetworkState for global project
- manual dependency injection di use DashboardModule

*** manual dependency injection
*** provide import statements
*** code refactor if better options
*** Don't change class name if not needed
*** Don't change unwanted codebase
*** Provide Full Codebase
*** read full document properly