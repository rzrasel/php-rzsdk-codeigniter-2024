//----- File: app-microservice-core/base-request.php -----

<?php
namespace Core\Data\Request;

abstract class BaseRequest {

    abstract public function rules(): array;

    public function authorize(): bool {
        return true;
    }

    public function validationData(): array {
        return (array) $this;
    }

    public function __get(string $name) {
        if (property_exists($this, $name)) {
            return $this->{$name};
        }
        return null;
    }

    public function __set(string $name, $value): void {
        $this->{$name} = $value;
    }

    public function __call(string $method, array $parameters) {
        throw new \BadMethodCallException(sprintf(
            'Method %s::%s does not exist.', static::class, $method
        ));
    }
}
?>

//----- File: app-microservice-core/database-type.php -----

<?php
namespace App\Microservice\Core\Utils\Type\Database;
?>
<?php
enum DatabaseType: string {
    case MYSQL = "mysql";
    case SQLITE = "sqlite";

    public static function getByName(string $value): ?self {
        foreach (self::cases() as $case) {
            if($case->name === $value) {
                return $case;
            }
        }
        return null;
    }
}
?>

//----- File: app-microservice-core/database.php -----

<?php
namespace App\Microservice\Core\Utils\Database;
?>
<?php
use App\Microservice\Core\Utils\Type\Database\DatabaseType;
use RzSDK\Database\SqliteConnection;
?>
<?php
class Database {
    //private SqliteConnection $dbConn;
    private $dbConn;
    //
    public function __construct() {
        $databaseType = DATABASE_TYPE;
        switch($databaseType) {
            case DatabaseType::MYSQL:
                break;
            case DatabaseType::SQLITE:
                $this->dbConn = $this->getSqliteDbConn();
                break;
            default:
                $this->dbConn = $this->getSqliteDbConn();
        }
    }

    public function getConnection() {
        return $this->dbConn;
    }

    private function getSqliteDbConn(): SqliteConnection {
        if(is_null($this->dbConn)) {
            return SqliteConnection::getInstance(DB_FULL_PATH);
        }
        return $this->dbConn;
    }
}
?>

//----- File: app-microservice-core/inner-data-bus.php -----

<?php
namespace App\Microservice\Core\Utils\Data\Inner\Data\Bus;
?>
<?php
use App\Microservice\Core\Utils\Type\Response\ResponseStatus;
?>
<?php
class InnerDataBus {
    public string $message;
    public bool $status;
    public $data;
    public ?ResponseStatus $type;

    public function __construct(string $message, bool $status, $data = null, ResponseStatus $type = null) {
        $this->message = $message;
        $this->status = $status;
        $this->data = $data;
        $this->type = $type;
    }
}
?>


//----- File: app-microservice-core/response-data.php -----

<?php
namespace App\Microservice\Core\Utils\Data\Response;
?>
<?php
use App\Microservice\Core\Utils\Type\Response\ResponseStatus;
?>
<?php
class ResponseData {
    public $message;
    public $status;
    public $data;

    public function __construct(string $message, ResponseStatus $status, mixed $data = null) {
        $this->message = $message;
        $this->status = $status->value;
        $this->data = $data;
    }

    public function toJson(): string {
        return json_encode($this);
    }
}
?>

//----- File: app-microservice-core/response-status.php -----

<?php
namespace App\Microservice\Core\Utils\Type\Response;
?>
<?php
enum ResponseStatus: string {
    case SUCCESS    = "success";
    case ERROR      = "error";

    public static function getByName(string $value): ?self {
        foreach (self::cases() as $case) {
            if ($case->name === $value) {
                return $case;
            }
        }
        return null;
    }
}
?>

//----- File: app-microservice-user-email/README.md -----

CREATE TABLE IF NOT EXISTS tbl_user_email (
user_id                       VARCHAR(36)      NOT NULL,
id                            VARCHAR(36)      NOT NULL,
email                         VARCHAR(320)     NOT NULL,
provider                      VARCHAR(255)     NOT NULL DEFAULT 'user' CHECK(provider IN ('user', 'google', 'facebook')),
is_primary                    BOOLEAN          NOT NULL DEFAULT FALSE,
verification_code             VARCHAR(8)       NULL,
last_verification_sent_at     TIMESTAMP        NULL,
verification_code_expiry      TIMESTAMP        NULL,
verification_status           TEXT             NOT NULL DEFAULT 'pending' CHECK(verification_status IN ('pending', 'verified', 'expired', 'blocked')),
status                        TEXT             NOT NULL DEFAULT 'active' CHECK(status IN ('active', 'inactive', 'blocked', 'deleted', 'removed')),
modified_date                 TIMESTAMP        NOT NULL DEFAULT CURRENT_TIMESTAMP,
created_date                  TIMESTAMP        NOT NULL DEFAULT CURRENT_TIMESTAMP,
modified_by                   VARCHAR(36)      NOT NULL,
created_by                    VARCHAR(36)      NOT NULL,
CONSTRAINT pk_user_email_id PRIMARY KEY(id),
CONSTRAINT uk_user_email_email UNIQUE(email),
CONSTRAINT fk_user_email_user_id_user_data_user_id FOREIGN KEY(user_id) REFERENCES tbl_user_data(user_id)
);

//----- File: app-microservice-core/database-type.php -----

<?php
namespace App\Microservice\Core\Utils\Type\Database;
?>
<?php
enum DatabaseType: string {
    case MYSQL = "mysql";
    case SQLITE = "sqlite";

    public static function getByName(string $value): ?self {
        foreach (self::cases() as $case) {
            if($case->name === $value) {
                return $case;
            }
        }
        return null;
    }
}
?>

//----- File: app-microservice-core/database.php -----

<?php
namespace App\Microservice\Core\Utils\Database;
?>
<?php
use App\Microservice\Core\Utils\Type\Database\DatabaseType;
use RzSDK\Database\SqliteConnection;
?>
<?php
class Database {
    //private SqliteConnection $dbConn;
    private $dbConn;
    //
    public function __construct() {
        $databaseType = DATABASE_TYPE;
        switch($databaseType) {
            case DatabaseType::MYSQL:
                break;
            case DatabaseType::SQLITE:
                $this->dbConn = $this->getSqliteDbConn();
                break;
            default:
                $this->dbConn = $this->getSqliteDbConn();
        }
    }

    public function getConnection() {
        return $this->dbConn;
    }

    private function getSqliteDbConn(): SqliteConnection {
        if(is_null($this->dbConn)) {
            return SqliteConnection::getInstance(DB_FULL_PATH);
        }
        return $this->dbConn;
    }
}
?>

//----- File: app-microservice-core/inner-data-bus.php -----

<?php
namespace App\Microservice\Core\Utils\Data\Inner\Data\Bus;
?>
<?php
use App\Microservice\Core\Utils\Type\Response\ResponseStatus;
?>
<?php
class InnerDataBus {
    public string $message;
    public bool $status;
    public $data;
    public ?ResponseStatus $type;

    public function __construct(string $message, bool $status, $data = null, ResponseStatus $type = null) {
        $this->message = $message;
        $this->status = $status;
        $this->data = $data;
        $this->type = $type;
    }
}
?>


//----- File: app-microservice-core/response-data.php -----

<?php
namespace App\Microservice\Core\Utils\Data\Response;
?>
<?php
use App\Microservice\Core\Utils\Type\Response\ResponseStatus;
?>
<?php
class ResponseData {
    public $message;
    public $status;
    public $data;

    public function __construct(string $message, ResponseStatus $status, $data = null) {
        $this->message = $message;
        $this->status = $status->value;
        $this->data = $data;
    }

    public function toJson(): string {
        return json_encode($this);
    }
}
?>

//----- File: app-microservice-core/response-status.php -----

<?php
namespace App\Microservice\Core\Utils\Type\Response;
?>
<?php
enum ResponseStatus: string {
    case SUCCESS    = "success";
    case ERROR      = "error";

    public static function getByName(string $value): ?self {
        foreach (self::cases() as $case) {
            if ($case->name === $value) {
                return $case;
            }
        }
        return null;
    }
}
?>

//----- File: app-microservice-user-email/data/model/user-email-response-dto.php -----

<?php
namespace App\Microservice\Schema\Data\Model\User\Email;
?>
<?php
class UserEmailResponseDto {
    public string $id;
    public string $email;
    public bool $is_primary;
    public string $verification_status;
    public string $status;
    public string $created_date;

    public function __construct(
        string $id,
        string $email,
        bool $is_primary,
        string $verification_status,
        string $status,
        string $created_date
    ) {
        $this->id = $id;
        $this->email = $email;
        $this->is_primary = $is_primary;
        $this->verification_status = $verification_status;
        $this->status = $status;
        $this->created_date = $created_date;
    }

    public function toArray(): array {
        return [
            'id' => $this->id,
            'email' => $this->email,
            'is_primary' => $this->is_primary,
            'verification_status' => $this->verification_status,
            'status' => $this->status,
            'created_date' => $this->created_date
        ];
    }
}

//----- File: app-microservice-user-email/data/repository/user-email-repository-impl.php -----

<?php
namespace App\Microservice\Data\Repository\User\Email;
?>
<?php
use App\Microservice\Domain\Repository\User\Email\EmailRepository;
use App\Microservice\Schema\Domain\Model\User\Email\UserEmailModel;
?>
<?php
class UserEmailRepositoryImpl implements UserEmailRepository {
    private PDO $connection;

    public function __construct(Database $database) {
        $this->connection = $database->getConnection();
    }

    public function create(UserEmailModel $email): UserEmailModel {
        $stmt = $this->connection->prepare("
            INSERT INTO tbl_user_email (
                user_id, id, email, provider, is_primary, verification_code,
                last_verification_sent_at, verification_code_expiry, verification_status, status,
                created_date, modified_date, created_by, modified_by
            ) VALUES (
                :user_id, :id, :email, :provider, :is_primary, :verification_code,
                :last_verification_sent_at, :verification_code_expiry, :verification_status, :status,
                :created_date, :modified_date, :created_by, :modified_by
            )
        ");

        $stmt->execute([
            ':user_id' => $email->user_id,
            ':id' => $email->id,
            ':email' => $email->email,
            ':provider' => $email->provider,
            ':is_primary' => $email->is_primary,
            ':verification_code' => $email->verification_code,
            ':last_verification_sent_at' => $email->last_verification_sent_at,
            ':verification_code_expiry' => $email->verification_code_expiry,
            ':verification_status' => $email->verification_status,
            ':status' => $email->status,
            ':created_date' => $email->created_date,
            ':modified_date' => $email->modified_date,
            ':created_by' => $email->created_by,
            ':modified_by' => $email->modified_by
        ]);

        return $email;
    }

    public function findByEmail(string $email): ?UserEmailModel {
        $stmt = $this->connection->prepare("
            SELECT * FROM tbl_user_email 
            WHERE email = :email AND status != 'deleted'
        ");

        $stmt->execute([':email' => $email]);
        return $this->hydrate($stmt->fetch(PDO::FETCH_ASSOC));
    }

    public function findById(string $id): ?UserEmailModel {
        $stmt = $this->connection->prepare("
            SELECT * FROM tbl_user_email 
            WHERE id = :id AND status != 'deleted'
        ");

        $stmt->execute([':id' => $id]);
        return $this->hydrate($stmt->fetch(PDO::FETCH_ASSOC));
    }

    public function findByUserId(string $user_id): array {
        $stmt = $this->connection->prepare("
            SELECT * FROM tbl_user_email 
            WHERE user_id = :user_id AND status != 'deleted'
            ORDER BY is_primary DESC, created_date ASC
        ");

        $stmt->execute([':user_id' => $user_id]);
        $emails = [];

        while ($data = $stmt->fetch(PDO::FETCH_ASSOC)) {
            if ($email = $this->hydrate($data)) {
                $emails[] = $email;
            }
        }

        return $emails;
    }

    public function findPrimaryByUserId(string $user_id): ?UserEmailModel {
        $stmt = $this->connection->prepare("
            SELECT * FROM tbl_user_email 
            WHERE user_id = :user_id AND is_primary = TRUE AND status != 'deleted'
            LIMIT 1
        ");

        $stmt->execute([':user_id' => $user_id]);
        return $this->hydrate($stmt->fetch(PDO::FETCH_ASSOC));
    }

    public function updateVerificationStatus(string $id, string $status): bool {
        $stmt = $this->connection->prepare("
            UPDATE tbl_user_email 
            SET verification_status = :status, 
                modified_date = :modified_date
            WHERE id = :id
        ");

        return $stmt->execute([
            ':id' => $id,
            ':status' => $status,
            ':modified_date' => date('Y-m-d H:i:s')
        ]);
    }

    public function setPrimary(string $user_id, string $id): bool {
        // First unset all primary emails
        $this->unsetPrimaryEmails($user_id);

        // Then set the new primary email
        $stmt = $this->connection->prepare("
            UPDATE tbl_user_email 
            SET is_primary = TRUE, 
                modified_date = :modified_date
            WHERE id = :id AND user_id = :user_id
        ");

        return $stmt->execute([
            ':id' => $id,
            ':user_id' => $user_id,
            ':modified_date' => date('Y-m-d H:i:s')
        ]);
    }

    public function remove(string $id): bool {
        $stmt = $this->connection->prepare("
            UPDATE tbl_user_email 
            SET status = 'deleted', 
                modified_date = :modified_date
            WHERE id = :id
        ");

        return $stmt->execute([
            ':id' => $id,
            ':modified_date' => date('Y-m-d H:i:s')
        ]);
    }

    public function setVerificationCode(string $id, string $code, string $expiry): bool {
        $stmt = $this->connection->prepare("
            UPDATE tbl_user_email 
            SET verification_code = :code,
                verification_code_expiry = :expiry,
                last_verification_sent_at = :sent_at,
                modified_date = :modified_date
            WHERE id = :id
        ");

        return $stmt->execute([
            ':id' => $id,
            ':code' => $code,
            ':expiry' => $expiry,
            ':sent_at' => date('Y-m-d H:i:s'),
            ':modified_date' => date('Y-m-d H:i:s')
        ]);
    }

    private function unsetPrimaryEmails(string $user_id): void {
        $stmt = $this->connection->prepare("
            UPDATE tbl_user_email 
            SET is_primary = FALSE, modified_date = :modified_date
            WHERE user_id = :user_id AND is_primary = TRUE
        ");

        $stmt->execute([
            ':user_id' => $user_id,
            ':modified_date' => date('Y-m-d H:i:s')
        ]);
    }

    private function hydrate(?array $data): ?UserEmailModel {
        if (!$data) return null;

        $email = new UserEmailModel(
            $data['user_id'],
            $data['email'],
            $data['created_by'],
            $data['modified_by'],
            $data['provider'],
            $data['is_primary'],
            $data['verification_status'],
            $data['status'],
            $data['id']
        );

        $email->verification_code = $data['verification_code'];
        $email->last_verification_sent_at = $data['last_verification_sent_at'];
        $email->verification_code_expiry = $data['verification_code_expiry'];
        $email->created_date = $data['created_date'];
        $email->modified_date = $data['modified_date'];

        return $email;
    }
}
?>

//----- File: app-microservice-user-email/data/usecase/user-email-service.php -----

<?php
namespace App\Microservice\Schema\Data\Services\User\Email;
?>
<?php
use App\Microservice\Core\Utils\Data\Response\ResponseData;
use App\Microservice\Core\Utils\Type\Response\ResponseStatus;
use App\Microservice\Domain\Repository\User\Email\EmailRepository;
use App\Microservice\Schema\Domain\Model\User\Email\UserEmailModel;
use App\Microservice\Schema\Data\Model\User\Email\UserEmailResponseDto;
?>
<?php
class UserEmailService {
    private UserEmailRepository $repository;
    private EmailNotification $notification;

    public function __construct(
        EmailRepository $repository,
        EmailNotification $notification
    ) {
        $this->repository = $repository;
        $this->notification = $notification;
    }

    public function addEmail(string $user_id, AddEmailRequest $request): ResponseData {
        // Check if email already exists
        if ($this->repository->findByEmail($request->email)) {
            return new ResponseData(
                'Email already exists',
                ResponseStatus::ERROR
            );
        }

        $email = new UserEmailModel(
            $user_id,
            $request->email,
            $user_id,
            $user_id,
            'user',
            $request->is_primary
        );

        $email = $this->repository->create($email);

        // Generate and send verification code
        $code = $this->generateVerificationCode();
        $expiry = date('Y-m-d H:i:s', strtotime('+1 hour'));
        $this->repository->setVerificationCode($email->id, $code, $expiry);
        $this->notification->sendVerificationEmail($email->email, $code);

        return new ResponseData(
            'Email added successfully',
            ResponseStatus::SUCCESS,
            new UserEmailResponseDto(
                $email->id,
                $email->email,
                $email->is_primary,
                $email->verification_status,
                $email->status,
                $email->created_date
            )
        );
    }

    public function setPrimaryEmail(string $user_id, SetPrimaryEmailRequest $request): ResponseData {
        $email = $this->repository->findById($request->email_id);

        if (!$email || $email->user_id !== $user_id) {
            return new ResponseData(
                'Email not found',
                ResponseStatus::NOT_FOUND
            );
        }

        if ($email->verification_status !== 'verified') {
            return new ResponseData(
                'Email must be verified before setting as primary',
                ResponseStatus::ERROR
            );
        }

        if ($this->repository->setPrimary($user_id, $email->id)) {
            return new ResponseData(
                'Primary email set successfully',
                ResponseStatus::SUCCESS,
                new UserEmailResponseDto(
                    $email->id,
                    $email->email,
                    true,
                    $email->verification_status,
                    $email->status,
                    $email->created_date
                )
            );
        }

        return new ResponseData(
            'Failed to set primary email',
            ResponseStatus::ERROR
        );
    }

    public function verifyEmail(string $user_id, VerifyEmailRequest $request): ResponseData {
        $email = $this->repository->findById($request->email_id);

        if (!$email || $email->user_id !== $user_id) {
            return new ResponseData(
                'Email not found',
                ResponseStatus::NOT_FOUND
            );
        }

        if ($email->verification_status === 'verified') {
            return new ResponseData(
                'Email already verified',
                ResponseStatus::SUCCESS,
                new UserEmailResponseDto(
                    $email->id,
                    $email->email,
                    $email->is_primary,
                    $email->verification_status,
                    $email->status,
                    $email->created_date
                )
            );
        }

        if (strtotime($email->verification_code_expiry) < time()) {
            $this->repository->updateVerificationStatus($email->id, 'expired');
            return new ResponseData(
                'Verification code expired',
                ResponseStatus::ERROR
            );
        }

        if ($email->verification_code !== $request->verification_code) {
            return new ResponseData(
                'Invalid verification code',
                ResponseStatus::ERROR
            );
        }

        if ($this->repository->updateVerificationStatus($email->id, 'verified')) {
            return new ResponseData(
                'Email verified successfully',
                ResponseStatus::SUCCESS,
                new UserEmailResponseDto(
                    $email->id,
                    $email->email,
                    $email->is_primary,
                    'verified',
                    $email->status,
                    $email->created_date
                )
            );
        }

        return new ResponseData(
            'Failed to verify email',
            ResponseStatus::ERROR
        );
    }

    public function getEmails(string $user_id): ResponseData {
        $emails = $this->repository->findByUserId($user_id);
        $response = [];

        foreach ($emails as $email) {
            $response[] = new UserEmailResponseDto(
                $email->id,
                $email->email,
                $email->is_primary,
                $email->verification_status,
                $email->status,
                $email->created_date
            );
        }

        return new ResponseData(
            'Emails retrieved successfully',
            ResponseStatus::SUCCESS,
            $response
        );
    }

    private function generateVerificationCode(): string {
        return substr(md5(uniqid(mt_rand(), true)), 0, 8);
    }
}
?>

//----- File: app-microservice-user-email/domain/model/user-email-model.php -----

<?php
namespace App\Microservice\Schema\Domain\Model\User\Email;
?>
<?php
class UserEmailModel {
    public string $id;
    public string $user_id;
    public string $email;
    public string $provider;
    public bool $is_primary;
    public ?string $verification_code;
    public ?string $last_verification_sent_at;
    public ?string $verification_code_expiry;
    public string $verification_status;
    public string $status;
    public string $created_date;
    public string $modified_date;
    public string $created_by;
    public string $modified_by;

    public function __construct(
        string $user_id,
        string $email,
        string $created_by,
        string $modified_by,
        string $provider = 'user',
        bool $is_primary = false,
        string $verification_status = 'pending',
        string $status = 'active',
        string $id = null
    ) {
        $this->id = $id ?? uuid_create();
        $this->user_id = $user_id;
        $this->email = $email;
        $this->provider = $provider;
        $this->is_primary = $is_primary;
        $this->verification_status = $verification_status;
        $this->status = $status;
        $this->created_by = $created_by;
        $this->modified_by = $modified_by;
        $this->created_date = date('Y-m-d H:i:s');
        $this->modified_date = date('Y-m-d H:i:s');
    }
}
?>


//----- File: app-microservice-user-email/domain/repository/user-email-repository.php -----

<?php
namespace App\Microservice\Domain\Repository\User\Email;
?>
<?php
use App\Microservice\Schema\Domain\Model\User\Email\UserEmailModel;
?>
<?php
interface UserEmailRepository {
    public function create(UserEmailModel $email): UserEmailModel;
    public function findByEmail(string $email): ?UserEmailModel;
    public function findById(string $id): ?UserEmailModel;
    public function findByUserId(string $user_id): array;
    public function findPrimaryByUserId(string $user_id): ?UserEmailModel;
    public function updateVerificationStatus(string $id, string $status): bool;
    public function setPrimary(string $user_id, string $id): bool;
    public function remove(string $id): bool;
    public function setVerificationCode(string $id, string $code, string $expiry): bool;
}
?>

//----- File: app-microservice-user-email/presentation/user-email-controller.php -----

<?php
namespace App\Microservice\Presentation\Controller\Use\Email;
?>
<?php
use App\Microservice\Schema\Data\Services\User\Email\EmailService;
?>
<?php
class UserEmailController {
    private EmailService $service;

    public function __construct(EmailService $service) {
        $this->service = $service;
    }

    public function addEmail(array $input): array {
        $user_id = AuthMiddleware::getAuthenticatedUserId();
        $request = new AddEmailRequest($input);

        $response = $this->service->addEmail($user_id, $request);
        return $response->toArray();
    }

    public function setPrimaryEmail(array $input): array {
        $user_id = AuthMiddleware::getAuthenticatedUserId();
        $request = new SetPrimaryEmailRequest($input);

        $response = $this->service->setPrimaryEmail($user_id, $request);
        return $response->toArray();
    }

    public function verifyEmail(array $input): array {
        $user_id = AuthMiddleware::getAuthenticatedUserId();
        $request = new VerifyEmailRequest($input);

        $response = $this->service->verifyEmail($user_id, $request);
        return $response->toArray();
    }

    public function getEmails(): array {
        $user_id = AuthMiddleware::getAuthenticatedUserId();
        $response = $this->service->getEmails($user_id);
        return $response->toArray();
    }
}
?>



- mvvm clean architecture directory structure
- provide directory file name location top of codebase
- mvvm clean architecture user email in php api only
- mvvm clean architecture data layer, domain layer, presentation layer
- mvvm clean architecture different user input request data layer, database insert data layer, response data layer
- use response for ResponseData class
- also provide how to use usage of UserEmailController class or call UserEmailController class

*** don't break code consistency
*** code or directory refactor if needed
*** code or directory refactor if better options
*** Don't change class name if not needed
*** Don't change unwanted codebase
*** provide full code
*** Provide Full Codebase
*** read full document properly

//----- File: app-microservice-user-email/data/model/user-email-response-dto.php -----

<?php
namespace App\Microservice\Schema\Data\Model\User\Email;
?>
<?php
class UserEmailResponseDto {
    public string $id;
    public string $email;
    public bool $is_primary;
    public string $verification_status;
    public string $status;
    public string $created_date;

    public function __construct(
        string $id,
        string $email,
        bool $is_primary,
        string $verification_status,
        string $status,
        string $created_date
    ) {
        $this->id = $id;
        $this->email = $email;
        $this->is_primary = $is_primary;
        $this->verification_status = $verification_status;
        $this->status = $status;
        $this->created_date = $created_date;
    }

    public function toArray(): array {
        return [
            'id' => $this->id,
            'email' => $this->email,
            'is_primary' => $this->is_primary,
            'verification_status' => $this->verification_status,
            'status' => $this->status,
            'created_date' => $this->created_date
        ];
    }
}

//----- File: app-microservice-user-email/data/repository/user-email-repository-impl.php -----

<?php
namespace App\Microservice\Data\Repository\User\Email;
?>
<?php
use App\Microservice\Domain\Repository\User\Email\EmailRepository;
use App\Microservice\Schema\Domain\Model\User\Email\UserEmailModel;
?>
<?php
class UserEmailRepositoryImpl implements UserEmailRepository {
    private PDO $connection;

    public function __construct(Database $database) {
        $this->connection = $database->getConnection();
    }

    public function create(UserEmailModel $email): UserEmailModel {
        $stmt = $this->connection->prepare("
            INSERT INTO tbl_user_email (
                user_id, id, email, provider, is_primary, verification_code,
                last_verification_sent_at, verification_code_expiry, verification_status, status,
                created_date, modified_date, created_by, modified_by
            ) VALUES (
                :user_id, :id, :email, :provider, :is_primary, :verification_code,
                :last_verification_sent_at, :verification_code_expiry, :verification_status, :status,
                :created_date, :modified_date, :created_by, :modified_by
            )
        ");

        $stmt->execute([
            ':user_id' => $email->user_id,
            ':id' => $email->id,
            ':email' => $email->email,
            ':provider' => $email->provider,
            ':is_primary' => $email->is_primary,
            ':verification_code' => $email->verification_code,
            ':last_verification_sent_at' => $email->last_verification_sent_at,
            ':verification_code_expiry' => $email->verification_code_expiry,
            ':verification_status' => $email->verification_status,
            ':status' => $email->status,
            ':created_date' => $email->created_date,
            ':modified_date' => $email->modified_date,
            ':created_by' => $email->created_by,
            ':modified_by' => $email->modified_by
        ]);

        return $email;
    }

    public function findByEmail(string $email): ?UserEmailModel {
        $stmt = $this->connection->prepare("
            SELECT * FROM tbl_user_email 
            WHERE email = :email AND status != 'deleted'
        ");

        $stmt->execute([':email' => $email]);
        return $this->hydrate($stmt->fetch(PDO::FETCH_ASSOC));
    }

    public function findById(string $id): ?UserEmailModel {
        $stmt = $this->connection->prepare("
            SELECT * FROM tbl_user_email 
            WHERE id = :id AND status != 'deleted'
        ");

        $stmt->execute([':id' => $id]);
        return $this->hydrate($stmt->fetch(PDO::FETCH_ASSOC));
    }

    public function findByUserId(string $user_id): array {
        $stmt = $this->connection->prepare("
            SELECT * FROM tbl_user_email 
            WHERE user_id = :user_id AND status != 'deleted'
            ORDER BY is_primary DESC, created_date ASC
        ");

        $stmt->execute([':user_id' => $user_id]);
        $emails = [];

        while ($data = $stmt->fetch(PDO::FETCH_ASSOC)) {
            if ($email = $this->hydrate($data)) {
                $emails[] = $email;
            }
        }

        return $emails;
    }

    public function findPrimaryByUserId(string $user_id): ?UserEmailModel {
        $stmt = $this->connection->prepare("
            SELECT * FROM tbl_user_email 
            WHERE user_id = :user_id AND is_primary = TRUE AND status != 'deleted'
            LIMIT 1
        ");

        $stmt->execute([':user_id' => $user_id]);
        return $this->hydrate($stmt->fetch(PDO::FETCH_ASSOC));
    }

    public function updateVerificationStatus(string $id, string $status): bool {
        $stmt = $this->connection->prepare("
            UPDATE tbl_user_email 
            SET verification_status = :status, 
                modified_date = :modified_date
            WHERE id = :id
        ");

        return $stmt->execute([
            ':id' => $id,
            ':status' => $status,
            ':modified_date' => date('Y-m-d H:i:s')
        ]);
    }

    public function setPrimary(string $user_id, string $id): bool {
        // First unset all primary emails
        $this->unsetPrimaryEmails($user_id);

        // Then set the new primary email
        $stmt = $this->connection->prepare("
            UPDATE tbl_user_email 
            SET is_primary = TRUE, 
                modified_date = :modified_date
            WHERE id = :id AND user_id = :user_id
        ");

        return $stmt->execute([
            ':id' => $id,
            ':user_id' => $user_id,
            ':modified_date' => date('Y-m-d H:i:s')
        ]);
    }

    public function remove(string $id): bool {
        $stmt = $this->connection->prepare("
            UPDATE tbl_user_email 
            SET status = 'deleted', 
                modified_date = :modified_date
            WHERE id = :id
        ");

        return $stmt->execute([
            ':id' => $id,
            ':modified_date' => date('Y-m-d H:i:s')
        ]);
    }

    public function setVerificationCode(string $id, string $code, string $expiry): bool {
        $stmt = $this->connection->prepare("
            UPDATE tbl_user_email 
            SET verification_code = :code,
                verification_code_expiry = :expiry,
                last_verification_sent_at = :sent_at,
                modified_date = :modified_date
            WHERE id = :id
        ");

        return $stmt->execute([
            ':id' => $id,
            ':code' => $code,
            ':expiry' => $expiry,
            ':sent_at' => date('Y-m-d H:i:s'),
            ':modified_date' => date('Y-m-d H:i:s')
        ]);
    }

    private function unsetPrimaryEmails(string $user_id): void {
        $stmt = $this->connection->prepare("
            UPDATE tbl_user_email 
            SET is_primary = FALSE, modified_date = :modified_date
            WHERE user_id = :user_id AND is_primary = TRUE
        ");

        $stmt->execute([
            ':user_id' => $user_id,
            ':modified_date' => date('Y-m-d H:i:s')
        ]);
    }

    private function hydrate(?array $data): ?UserEmailModel {
        if (!$data) return null;

        $email = new UserEmailModel(
            $data['user_id'],
            $data['email'],
            $data['created_by'],
            $data['modified_by'],
            $data['provider'],
            $data['is_primary'],
            $data['verification_status'],
            $data['status'],
            $data['id']
        );

        $email->verification_code = $data['verification_code'];
        $email->last_verification_sent_at = $data['last_verification_sent_at'];
        $email->verification_code_expiry = $data['verification_code_expiry'];
        $email->created_date = $data['created_date'];
        $email->modified_date = $data['modified_date'];

        return $email;
    }
}
?>

//----- File: app-microservice-user-email/data/service/user-email-service.php -----

<?php
namespace App\Microservice\Schema\Data\Services\User\Email;
?>
<?php
use App\Microservice\Core\Utils\Data\Response\ResponseData;
use App\Microservice\Core\Utils\Type\Response\ResponseStatus;
use App\Microservice\Domain\Repository\User\Email\EmailRepository;
use App\Microservice\Schema\Domain\Model\User\Email\UserEmailModel;
use App\Microservice\Schema\Data\Model\User\Email\UserEmailResponseDto;
?>
<?php
class UserEmailService {
    private UserEmailRepository $repository;
    private EmailNotification $notification;

    public function __construct(
        EmailRepository $repository,
        EmailNotification $notification
    ) {
        $this->repository = $repository;
        $this->notification = $notification;
    }

    public function addEmail(string $user_id, AddEmailRequest $request): ResponseData {
        // Check if email already exists
        if ($this->repository->findByEmail($request->email)) {
            return new ResponseData(
                'Email already exists',
                ResponseStatus::ERROR
            );
        }

        $email = new UserEmailModel(
            $user_id,
            $request->email,
            $user_id,
            $user_id,
            'user',
            $request->is_primary
        );

        $email = $this->repository->create($email);

        // Generate and send verification code
        $code = $this->generateVerificationCode();
        $expiry = date('Y-m-d H:i:s', strtotime('+1 hour'));
        $this->repository->setVerificationCode($email->id, $code, $expiry);
        $this->notification->sendVerificationEmail($email->email, $code);

        return new ResponseData(
            'Email added successfully',
            ResponseStatus::SUCCESS,
            new UserEmailResponseDto(
                $email->id,
                $email->email,
                $email->is_primary,
                $email->verification_status,
                $email->status,
                $email->created_date
            )
        );
    }

    public function setPrimaryEmail(string $user_id, SetPrimaryEmailRequest $request): ResponseData {
        $email = $this->repository->findById($request->email_id);

        if (!$email || $email->user_id !== $user_id) {
            return new ResponseData(
                'Email not found',
                ResponseStatus::NOT_FOUND
            );
        }

        if ($email->verification_status !== 'verified') {
            return new ResponseData(
                'Email must be verified before setting as primary',
                ResponseStatus::ERROR
            );
        }

        if ($this->repository->setPrimary($user_id, $email->id)) {
            return new ResponseData(
                'Primary email set successfully',
                ResponseStatus::SUCCESS,
                new UserEmailResponseDto(
                    $email->id,
                    $email->email,
                    true,
                    $email->verification_status,
                    $email->status,
                    $email->created_date
                )
            );
        }

        return new ResponseData(
            'Failed to set primary email',
            ResponseStatus::ERROR
        );
    }

    public function verifyEmail(string $user_id, VerifyEmailRequest $request): ResponseData {
        $email = $this->repository->findById($request->email_id);

        if (!$email || $email->user_id !== $user_id) {
            return new ResponseData(
                'Email not found',
                ResponseStatus::NOT_FOUND
            );
        }

        if ($email->verification_status === 'verified') {
            return new ResponseData(
                'Email already verified',
                ResponseStatus::SUCCESS,
                new UserEmailResponseDto(
                    $email->id,
                    $email->email,
                    $email->is_primary,
                    $email->verification_status,
                    $email->status,
                    $email->created_date
                )
            );
        }

        if (strtotime($email->verification_code_expiry) < time()) {
            $this->repository->updateVerificationStatus($email->id, 'expired');
            return new ResponseData(
                'Verification code expired',
                ResponseStatus::ERROR
            );
        }

        if ($email->verification_code !== $request->verification_code) {
            return new ResponseData(
                'Invalid verification code',
                ResponseStatus::ERROR
            );
        }

        if ($this->repository->updateVerificationStatus($email->id, 'verified')) {
            return new ResponseData(
                'Email verified successfully',
                ResponseStatus::SUCCESS,
                new UserEmailResponseDto(
                    $email->id,
                    $email->email,
                    $email->is_primary,
                    'verified',
                    $email->status,
                    $email->created_date
                )
            );
        }

        return new ResponseData(
            'Failed to verify email',
            ResponseStatus::ERROR
        );
    }

    public function getEmails(string $user_id): ResponseData {
        $emails = $this->repository->findByUserId($user_id);
        $response = [];

        foreach ($emails as $email) {
            $response[] = new UserEmailResponseDto(
                $email->id,
                $email->email,
                $email->is_primary,
                $email->verification_status,
                $email->status,
                $email->created_date
            );
        }

        return new ResponseData(
            'Emails retrieved successfully',
            ResponseStatus::SUCCESS,
            $response
        );
    }

    private function generateVerificationCode(): string {
        return substr(md5(uniqid(mt_rand(), true)), 0, 8);
    }
}
?>

//----- File: app-microservice-user-email/domain/model/user-email-model.php -----

<?php
namespace App\Microservice\Schema\Domain\Model\User\Email;
?>
<?php
class UserEmailModel {
    public string $id;
    public string $user_id;
    public string $email;
    public string $provider;
    public bool $is_primary;
    public ?string $verification_code;
    public ?string $last_verification_sent_at;
    public ?string $verification_code_expiry;
    public string $verification_status;
    public string $status;
    public string $created_date;
    public string $modified_date;
    public string $created_by;
    public string $modified_by;

    public function __construct(
        string $user_id,
        string $email,
        string $created_by,
        string $modified_by,
        string $provider = 'user',
        bool $is_primary = false,
        string $verification_status = 'pending',
        string $status = 'active',
        string $id = null
    ) {
        $this->id = $id ?? uuid_create();
        $this->user_id = $user_id;
        $this->email = $email;
        $this->provider = $provider;
        $this->is_primary = $is_primary;
        $this->verification_status = $verification_status;
        $this->status = $status;
        $this->created_by = $created_by;
        $this->modified_by = $modified_by;
        $this->created_date = date('Y-m-d H:i:s');
        $this->modified_date = date('Y-m-d H:i:s');
    }
}
?>


//----- File: app-microservice-user-email/domain/repository/user-email-repository.php -----

<?php
namespace App\Microservice\Domain\Repository\User\Email;
?>
<?php
use App\Microservice\Schema\Domain\Model\User\Email\UserEmailModel;
?>
<?php
interface UserEmailRepository {
    public function create(UserEmailModel $email): UserEmailModel;
    public function findByEmail(string $email): ?UserEmailModel;
    public function findById(string $id): ?UserEmailModel;
    public function findByUserId(string $user_id): array;
    public function findPrimaryByUserId(string $user_id): ?UserEmailModel;
    public function updateVerificationStatus(string $id, string $status): bool;
    public function setPrimary(string $user_id, string $id): bool;
    public function remove(string $id): bool;
    public function setVerificationCode(string $id, string $code, string $expiry): bool;
}
?>

//----- File: app-microservice-user-email/presentation/user-email-controller.php -----

<?php
namespace App\Microservice\Presentation\Controller\Use\Email;
?>
<?php
use App\Microservice\Schema\Data\Services\User\Email\EmailService;
?>
<?php
class UserEmailController {
    public function __construct(
        private UserEmailService $service
    ) {}

    public function addEmail(array $input): array {
        $user_id = AuthMiddleware::getAuthenticatedUserId();
        $request = new AddEmailRequest($input);

        $response = $this->service->addEmail($user_id, $request);
        return $response->toArray();
    }
}
?>

//----- File: app-microservice-user-email/user-email-mapper.php -----

<?php
namespace App\Microservice\Data\Mapper\User\Email;
?>
<?php
use App\Microservice\Schema\Domain\Model\User\Email\UserEmailModel;
?>
<?php
class UserEmailMapper {
    public static function mapEntityToParams(UserEmailModel $email): array {
        return [
            ':user_id' => $email->user_id,
            ':id' => $email->id,
            ':email' => $email->email,
            ':provider' => $email->provider,
            ':is_primary' => $email->is_primary,
            ':verification_code' => $email->verification_code,
            ':last_verification_sent_at' => $email->last_verification_sent_at,
            ':verification_code_expiry' => $email->verification_code_expiry,
            ':verification_status' => $email->verification_status,
            ':status' => $email->status,
            ':created_date' => $email->created_date,
            ':modified_date' => $email->modified_date,
            ':created_by' => $email->created_by,
            ':modified_by' => $email->modified_by
        ];
    }
}

